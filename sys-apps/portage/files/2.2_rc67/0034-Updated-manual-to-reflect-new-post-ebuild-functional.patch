From 5393676da14d977da3167eb439f9addeac21a09b Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Wed, 2 Jun 2010 16:33:36 -0400
Subject: [PATCH 34/52] Updated manual to reflect new post-ebuild functionality, and to be clearer

---
 doc/config/hooks.docbook |   61 ++++++++++++++++++++++++++++++----------------
 1 files changed, 40 insertions(+), 21 deletions(-)

diff --git a/doc/config/hooks.docbook b/doc/config/hooks.docbook
index c382815..ca62f5f 100644
--- a/doc/config/hooks.docbook
+++ b/doc/config/hooks.docbook
@@ -3,26 +3,28 @@
 	<sect1 id='config-hooks-locations'>
 		<title>Hooks Locations</title>
 		<para>
-		If a hook directory exists, they will either be executed before
-		or after that particular stage. The hooks inside each directory
-		will be executed by bash. Each one will receive the environment
-		of an ebuild, so they are capable of inherit, einfo, and other
-		common commands (if you find them useful). Avoid commands that
-		may trigger changes in the filesystem!
+		If a hook directory exists, the bash scripts within each one
+		wil either be executed before or after that particular stage, in
+		alphabetical order. Each one will receive the environment of an
+		ebuild, so they are capable of inherit, einfo, and other common
+		commands (if you find them useful). Avoid commands that may
+		trigger changes in the filesystem!
 		</para>
 		
 		<para>
-		A hook is presently not allowed to alter portage's execution,
-		but they can supplement it with additional functionality. Since
-		hooks execute in a bash environment, they are told the parent
-		process ID, which can be used to kill the parent (nicely,
-		please) if absolutely needed. This might be useful in a pre-sync
-		script.
+		All hooks are not allowed to directly alter portage's execution,
+		but they can accomplish certain extra tasks at various points,
+		which might indrectly alter portage's execution. Since hooks
+		execute in a bash environment, they are told the parent process
+		ID, which can be used to kill portage if absolutely needed. This
+		might be useful if a hook handled the rest of a certain job,
+		such as syncing, and portage's default behavior is undesired, or
+		if a hook caught potential problems with the rest of portage's
+		execution.
 		</para>
 		
 		<para>
-		When a hook is called, any of the following arguments are
-		passed:
+		A hook script is expected to understand the following usage:
 		<cmdsynopsis>
 			<command>/bin/bash <replaceable>...</replaceable></command><sbr/>
 
@@ -35,14 +37,13 @@
 		</para>
 		
 		<para>
-		As of this writing, the following hook directories are
-		supported. It can be assumed that the above arguments apply
-		except wherever described differently.
+		The following hook directories are supported. The standard hook
+		script usage applies, except wherever described differently.
 		</para>
 		
 		<itemizedlist>
 			<listitem><para><filename>/etc/portage/hooks/pre-ebuild.d/</filename> - executed before every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
-			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - yet to be implemented</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - executed after every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
 			<listitem><para><filename>/etc/portage/hooks/pre-run.d/</filename> - executed before portage considers most things, including proper permissions and validity of arguments.</para></listitem>
 			<listitem><para><filename>/etc/portage/hooks/post-run.d/</filename> - executed after portage is done. It should run regardless of any errors or signals sent, but this cannot be guaranteed for certain scenarios (such as when the KILL signal is received). No information is available concerning the reason portage is exiting. This is a limitation of python itself.</para></listitem>
 			<listitem><para><filename>/etc/portage/hooks/pre-sync.d/</filename> - executed before portage synchronizes the portage tree.</para></listitem>
@@ -57,22 +58,40 @@
 		to get you started. Replace the colons with actual code where
 		desired.
 		</para>
+		<para>
+		It's highly recommended that --verbose, --debug, and --quiet be
+		utilized for suppressing or adding to "regular" output. The
+		following skeleton hook already has example code in place to
+		handle these flags.
+		</para>
 		<programlisting>
 		#!/bin/bash
 
-		einfo "This is an example hook."
+		verbose_redirect="/dev/null"
+		debug_redirect="/dev/null"
 		while [[ "$1" != "" ]]; do
 			if [[ "$1" == "--opt" ]]; then
-				:
+				if [[ "$2" == "--verbose" ]]; then
+					verbose_redirect="/dev/tty"
+				fi
+				if [[ "$2" == "--debug" ]]; then
+					debug_redirect="/dev/tty"
+				fi
+				if [[ "$2" == "--quiet" ]]; then
+					verbose_redirect="/dev/null"
+					debug_redirect="/dev/null"
+				fi
 			elif [[ "$1" == "--action" ]]; then
 				:
 			elif [[ "$1" == "--target" ]]; then
 				:
 			else
-				ewarn "Unknown hook option: $1 $2"
+				ewarn "Unknown hook option: $1 $2" > "${verbose_redirect}" 2>&1
 			fi
 			shift 2
 		done
+		einfo "This is an example hook." > "${verbose_redirect}" 2>&1
+		einfo "This is debug output." > "${debug_redirect}" 2>&1
 		</programlisting>
 	</sect1>
 </chapter>
-- 
1.6.4.4

