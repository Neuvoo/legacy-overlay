From f96193507c1a935b5ab26981fc1585ffb2731f84 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 19:23:19 -0400
Subject: [PATCH 12/52] Added ability to receive options, action, and files into hooks

---
 pym/_emerge/main.py  |    2 +-
 pym/portage/hooks.py |   26 +++++++++++++++++++++-----
 2 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index b06ace8..d61d91e 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1182,7 +1182,7 @@ def emerge_main():
 	os.umask(0o22)
 	settings, trees, mtimedb = load_emerge_config()
 	if "hooks" in settings['FEATURES']:
-		portage.hooks.HookDirectory('pre-run', settings).execute()
+		portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, myfiles=myfiles).execute()
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 39ed413..17f3148 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -18,7 +18,10 @@ from process import spawn
 
 class HookDirectory(object):
 
-	def __init__ (self, phase, settings):
+	def __init__ (self, phase, settings, myopts=None, myaction=None, myfiles=None):
+		self.myopts = myopts
+		self.myaction = myaction
+		self.myfiles = myfiles
 		check_config_instance(settings)
 		self.settings = settings
 		self.path = os.path.join(settings["PORTAGE_CONFIGROOT"], HOOKS_PATH, phase + '.d')
@@ -31,7 +34,7 @@ class HookDirectory(object):
 		path = normalize_path(path)
 		
 		if not os.path.exists(path):
-			self.output.warn('This hook path could not be found: ' + path)
+			self.output.ewarn('This hook path could not be found: ' + path)
 			return
 		
 		if os.path.isdir(path):
@@ -39,14 +42,17 @@ class HookDirectory(object):
 				for dir in dirs:
 					self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
 				for filename in files:
-					HookFile(os.path.join(path, filename), self.settings).execute()
+					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.myfiles).execute()
 		
 		else:
 			raise InvalidLocation('This hook path ought to be a directory: ' + path)
 
 class HookFile (object):
 	
-	def __init__ (self, path, settings):
+	def __init__ (self, path, settings, myopts=None, myaction=None, myfiles=None):
+		self.myopts = myopts
+		self.myaction = myaction
+		self.myfiles = myfiles
 		check_config_instance(settings)
 		self.path = path
 		self.settings = settings
@@ -58,7 +64,17 @@ class HookFile (object):
 			raise InvalidLocation('This hook path could not be found: ' + path)
 		
 		if os.path.isfile(path):
-			code = spawn(mycommand=[BASH_BINARY, path], env=self.settings.environ())
+			command=[BASH_BINARY, path]
+			if self.myopts:
+				for myopt in myopts:
+					command.extend(['--opt', myopt])
+			if self.myaction:
+				command.extend(['--action', myaction])
+			if self.myfiles:
+				for myfile in myfiles:
+					command.extend(['--file', myfile])
+			
+			code = spawn(mycommand=command, env=self.settings.environ())
 			if code: # if failure
 				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
 		
-- 
1.6.4.4

