From 7137ab5ef9321c815020ebe0f9a70ddbee727f6a Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Mon, 19 Apr 2010 01:46:05 -0400
Subject: [PATCH 18/52] Added pre- and post-ebuild functionality

---
 pym/portage/package/ebuild/doebuild.py |   50 ++++++++++++++++++++++++++++---
 1 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 4ca74e5..9c6f6f0 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -532,10 +532,13 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		doebuild_environment(myebuild, mydo, myroot, mysettings, debug,
 			use_cache, mydbapi)
 
+		portage.hooks.HookDirectory(phase='pre-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+
 		if mydo in clean_phases:
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " clean",
 				mysettings, debug=debug, fd_pipes=fd_pipes, free=1,
 				logfile=None, returnpid=returnpid)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		restrict = set(mysettings.get('PORTAGE_RESTRICT', '').split())
@@ -547,6 +550,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				mypids = spawn(_shell_quote(ebuild_sh_binary) + " depend",
 					mysettings, fd_pipes=fd_pipes, returnpid=True,
 					droppriv=droppriv)
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return mypids
 			elif isinstance(dbkey, dict):
 				mysettings["dbkey"] = ""
@@ -579,6 +583,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					# Don't trust bash's returncode if the
 					# number of lines is incorrect.
 					retval = 1
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 			elif dbkey:
 				mysettings["dbkey"] = dbkey
@@ -586,9 +591,11 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				mysettings["dbkey"] = \
 					os.path.join(mysettings.depcachedir, "aux_db_key_temp")
 
-			return spawn(_shell_quote(ebuild_sh_binary) + " depend",
+			retval = spawn(_shell_quote(ebuild_sh_binary) + " depend",
 				mysettings,
 				droppriv=droppriv)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			return retval
 
 		# Validate dependency metadata here to ensure that ebuilds with invalid
 		# data are never installed via the ebuild command. Don't bother when
@@ -597,6 +604,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if not returnpid:
 			rval = _validate_deps(mysettings, myroot, mydo, mydbapi)
 			if rval != os.EX_OK:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return rval
 
 		if "PORTAGE_TMPDIR" not in mysettings or \
@@ -605,6 +613,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				"PORTAGE_TMPDIR variable, '%s',\n"
 				"does not exist.  Please create this directory or "
 				"correct your PORTAGE_TMPDIR setting.\n") % mysettings.get("PORTAGE_TMPDIR", ""), noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 		
 		# as some people use a separate PORTAGE_TMPDIR mount
@@ -619,6 +628,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			writemsg(_("%s is not writable.\n"
 				"Likely cause is that you've mounted it as readonly.\n") % checkdir,
 				noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 		else:
 			fd = tempfile.NamedTemporaryFile(prefix="exectest-", dir=checkdir)
@@ -630,13 +640,16 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					"Please make sure that portage can execute files in this directory.\n") % checkdir,
 					noiselevel=-1)
 				fd.close()
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			fd.close()
 		del checkdir
 
 		if mydo == "unmerge":
-			return unmerge(mysettings["CATEGORY"],
+			retval = unmerge(mysettings["CATEGORY"],
 				mysettings["PF"], myroot, mysettings, vartree=vartree)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			return retval
 
 		# Build directory creation isn't required for any of these.
 		# In the fetch phase, the directory is needed only for RESTRICT=fetch
@@ -648,6 +661,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			not (mydo == 'fetch' and 'fetch' not in restrict):
 			mystatus = prepare_build_dirs(myroot, mysettings, cleanup)
 			if mystatus:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return mystatus
 			have_build_dirs = True
 
@@ -716,6 +730,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					for line in wrap(msg, 70):
 						eerror(line, phase="setup", key=mysettings.mycpv)
 					elog_process(mysettings.mycpv, mysettings)
+					portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 					return 1
 			del env_file, env_stat, saved_env
 			_doebuild_exit_status_unlink(
@@ -726,14 +741,17 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		# if any of these are being called, handle them -- running them out of
 		# the sandbox -- and stop now.
 		if mydo == "help":
-			return spawn(_shell_quote(ebuild_sh_binary) + " " + mydo,
+			retval = spawn(_shell_quote(ebuild_sh_binary) + " " + mydo,
 				mysettings, debug=debug, free=1, logfile=logfile)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			return retval
 		elif mydo == "setup":
 			retval = spawn(
 				_shell_quote(ebuild_sh_binary) + " " + mydo, mysettings,
 				debug=debug, free=1, logfile=logfile, fd_pipes=fd_pipes,
 				returnpid=returnpid)
 			if returnpid:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 			retval = exit_status_check(retval)
 			if secpass >= 2:
@@ -742,6 +760,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				apply_recursive_permissions(mysettings["T"],
 					uid=portage_uid, gid=portage_gid, dirmode=0o70, dirmask=0,
 					filemode=0o60, filemask=0)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 		elif mydo == "preinst":
 			phase_retval = spawn(
@@ -750,6 +769,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return phase_retval
 
 			phase_retval = exit_status_check(phase_retval)
@@ -764,6 +784,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				if phase_retval != os.EX_OK:
 					writemsg(_("!!! post preinst failed; exiting.\n"),
 						noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return phase_retval
 		elif mydo == "postinst":
 			phase_retval = spawn(
@@ -772,6 +793,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return phase_retval
 
 			phase_retval = exit_status_check(phase_retval)
@@ -785,6 +807,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				if phase_retval != os.EX_OK:
 					writemsg(_("!!! post postinst failed; exiting.\n"),
 						noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return phase_retval
 		elif mydo in ("prerm", "postrm", "config", "info"):
 			retval =  spawn(
@@ -793,9 +816,11 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 
 			retval = exit_status_check(retval)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		mycpv = "/".join((mysettings["CATEGORY"], mysettings["PF"]))
@@ -825,6 +850,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				writemsg(_("!!! Invalid SRC_URI for '%s'.\n") % mycpv,
 					noiselevel=-1)
 				del e
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			mysettings.configdict["pkg"]["A"] = " ".join(alist)
 			mysettings.configdict["pkg"]["AA"] = " ".join(aalist)
@@ -836,6 +862,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					fetchme = alist
 				if not fetch(fetchme, mysettings, listonly=listonly,
 					fetchonly=fetchonly):
+					portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 					return 1
 
 		else:
@@ -850,13 +877,18 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			checkme = alist
 
 		if mydo == "fetch" and listonly:
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 0
 
 		try:
 			if mydo == "manifest":
-				return not digestgen(mysettings=mysettings, myportdb=mydbapi)
+				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				return not retval
 			elif mydo == "digest":
-				return not digestgen(mysettings=mysettings, myportdb=mydbapi)
+				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				return not retval
 			elif mydo != 'fetch' and not emerge_skip_digest and \
 				"digest" in mysettings.features:
 				# Don't do this when called by emerge or when called just
@@ -866,14 +898,17 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		except PermissionDenied as e:
 			writemsg(_("!!! Permission Denied: %s\n") % (e,), noiselevel=-1)
 			if mydo in ("digest", "manifest"):
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 
 		# See above comment about fetching only when needed
 		if not emerge_skip_distfiles and \
 			not digestcheck(checkme, mysettings, "strict" in features):
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
 		if mydo == "fetch":
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 0
 
 		# remove PORTAGE_ACTUAL_DISTDIR once cvs/svn is supported via SRC_URI
@@ -977,6 +1012,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				os.path.join(mysettings["PORTAGE_BUILDDIR"], ".installed")):
 				writemsg(_("!!! mydo=qmerge, but the install phase has not been run\n"),
 					noiselevel=-1)
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			# qmerge is a special phase that implies noclean.
 			if "noclean" not in mysettings.features:
@@ -1005,8 +1041,10 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					vartree=vartree, prev_mtimes=prev_mtimes)
 		else:
 			writemsg_stdout(_("!!! Unknown mydo: %s\n") % mydo, noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
+		portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 		return retval
 
 	finally:
@@ -1078,8 +1116,10 @@ def _validate_deps(mysettings, myroot, mydo, mydbapi):
 			portage.util.writemsg_level(x,
 				level=logging.ERROR, noiselevel=-1)
 		if mydo not in invalid_dep_exempt_phases:
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
+	portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 	return os.EX_OK
 
 # XXX This would be to replace getstatusoutput completely.
-- 
1.6.4.4

