From 4b1ff422920b24d5bb2edf9bed1a2264785a1200 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 17:00:40 -0400
Subject: [PATCH 07/52] Rewrote the HookDirectory object to use HookFile objects, to break up what was to become a monolithic object.

---
 pym/portage/hooks.py                          |   32 ++++++++++++++---
 pym/portage/tests/hooks/test_HookDirectory.py |   45 +++++++++++++------------
 2 files changed, 49 insertions(+), 28 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 3b9dbef..844d17a 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -13,6 +13,7 @@ from portage import check_config_instance
 from portage import normalize_path
 from portage.exception import PortageException
 from portage.exception import InvalidLocation
+from portage.output import EOutput
 from process import spawn
 
 class HookDirectory(object):
@@ -21,6 +22,7 @@ class HookDirectory(object):
 		check_config_instance(settings)
 		self.settings = settings
 		self.path = os.path.join(settings["PORTAGE_CONFIGROOT"], HOOKS_PATH, phase + '.d')
+		self.output = EOutput()
 
 	def execute (self, path=None):
 		if not path:
@@ -29,20 +31,38 @@ class HookDirectory(object):
 		path = normalize_path(path)
 		
 		if not os.path.exists(path):
-			raise InvalidLocation('This hooks path could not be found: ' + path)
+			raise InvalidLocation('This hook path could not be found: ' + path)
 		
 		if os.path.isdir(path):
 			for parent, dirs, files in os.walk(path):
+				for dir in dirs:
+					self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
 				for filename in files:
-					if filename[:1] == '.':
-						continue
-					else:
-						self.execute(os.path.join(path, filename))
+					HookFile(os.path.join(path, filename), self.settings).execute()
 		
-		elif os.path.isfile(path):
+		else:
+			raise InvalidLocation('This hook path ought to be a directory: ' + path)
+
+class HookFile (object):
+	
+	def __init__ (self, path, settings):
+		check_config_instance(settings)
+		self.path = path
+		self.settings = settings
+	
+	def execute (self):
+		path = normalize_path(self.path)
+		
+		if not os.path.exists(path):
+			raise InvalidLocation('This hook path could not be found: ' + path)
+		
+		if os.path.isfile(path):
 			code = spawn(mycommand=[BASH_BINARY, path], env=self.settings.environ())
 			if code: # if failure
 				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
+		
+		else:
+			raise InvalidLocation('This hook path ought to be a file: ' + path)
 
 if __name__ == "__main__": # TODO: debug
 	from portage.package.ebuild.config import config
diff --git a/pym/portage/tests/hooks/test_HookDirectory.py b/pym/portage/tests/hooks/test_HookDirectory.py
index 070e07e..2dbf17c 100644
--- a/pym/portage/tests/hooks/test_HookDirectory.py
+++ b/pym/portage/tests/hooks/test_HookDirectory.py
@@ -17,38 +17,39 @@ class HookDirectoryTestCase(TestCase):
 		Based on test_PackageKeywordsFile.py
 		"""
 
-		tmp_dir = self.BuildTmp()
+		tmp_dirs = ['etc', 'portage', 'hooks', 'test.d']
+		tmp_dir_path = self.BuildTmp(tmp_dirs)
+		tmp_dirs = [tmp_dir_path, 'etc', 'portage', 'hooks', 'test.d']
 		try:
 			settings = config()
-			settings["PORTAGE_CONFIGROOT"] = tmp_dir
+			settings["PORTAGE_CONFIGROOT"] = tmp_dir_path
 			hooks = HookDirectory('test', settings)
 			hooks.execute()
 		finally:
-			self.NukeTmp(tmp_dir)
+			self.NukeTmp(tmp_dirs)
 	
-	def BuildTmp(self):
-		tmp_dir = mkdtemp()
-		hooks_dir = tmp_dir+'/etc'
-		os.mkdir(hooks_dir)
-		hooks_dir = hooks_dir+'/portage'
-		os.mkdir(hooks_dir)
-		hooks_dir = hooks_dir+'/hooks'
-		os.mkdir(hooks_dir)
-		hooks_dir = hooks_dir+'/test.d'
-		os.mkdir(hooks_dir)
+	def BuildTmp(self, tmp_subdirs):
+		tmp_dir_path = mkdtemp()
+		hooks_dir = tmp_dir_path
+		for tmp_subdir in tmp_subdirs:
+			hooks_dir = hooks_dir + '/' + tmp_subdir
+			os.mkdir(hooks_dir)
 		
 		f = open(hooks_dir+'/testhook', 'w')
 		f.write('#!/bin/bash\n')
 		f.write('exit 0\n')
 		f.close()
 		
-		return tmp_dir
+		return tmp_dir_path
 
-	def NukeTmp(self, tmp_dir):
-		hooks_dir = tmp_dir+'/etc/portage/hooks/test.d'
-		os.unlink(hooks_dir+'/testhook')
-		os.rmdir(tmp_dir+'/etc/portage/hooks/test.d')
-		os.rmdir(tmp_dir+'/etc/portage/hooks')
-		os.rmdir(tmp_dir+'/etc/portage')
-		os.rmdir(tmp_dir+'/etc')
-		os.rmdir(tmp_dir)
+	def NukeTmp(self, tmp_dirs):
+		tmp_dir_paths = []
+		curr_path = ''
+		for tmp_dir in tmp_dirs:
+			curr_path = curr_path + '/' + tmp_dir
+			tmp_dir_paths.append(curr_path)
+		
+		tmp_dir_paths.reverse()
+		os.unlink(curr_path+'/testhook')
+		for tmp_dir_path in tmp_dir_paths:
+			os.rmdir(tmp_dir_path)
-- 
1.6.4.4

