From 46f57af26aa0c2448bf3921a8a1fc1342f891ccd Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Mon, 19 Apr 2010 01:41:55 -0400
Subject: [PATCH 17/52] Changed myfiles to mytargets. Makes much more sense with that name

---
 pym/_emerge/main.py  |    2 +-
 pym/portage/hooks.py |   16 ++++++++--------
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index 90d13fe..545ca28 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1185,7 +1185,7 @@ def emerge_main():
 
 	# Portage configured; let's let a hook set everything up before we do anything more
 	if "hooks" in settings['FEATURES']:
-		portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, myfiles=myfiles).execute()
+		portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute()
 
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 4a44b6e..7a5e9fb 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -18,10 +18,10 @@ from process import spawn
 
 class HookDirectory(object):
 
-	def __init__ (self, phase, settings, myopts=None, myaction=None, myfiles=None):
+	def __init__ (self, phase, settings, myopts=None, myaction=None, mytargets=None):
 		self.myopts = myopts
 		self.myaction = myaction
-		self.myfiles = myfiles
+		self.mytargets = mytargets
 		check_config_instance(settings)
 		self.settings = settings
 		self.path = os.path.join(settings["PORTAGE_CONFIGROOT"], HOOKS_PATH, phase + '.d')
@@ -42,17 +42,17 @@ class HookDirectory(object):
 				for dir in dirs:
 					self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
 				for filename in files:
-					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.myfiles).execute()
+					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.mytargets).execute()
 		
 		else:
 			raise InvalidLocation('This hook path ought to be a directory: ' + path)
 
 class HookFile (object):
 	
-	def __init__ (self, path, settings, myopts=None, myaction=None, myfiles=None):
+	def __init__ (self, path, settings, myopts=None, myaction=None, mytargets=None):
 		self.myopts = myopts
 		self.myaction = myaction
-		self.myfiles = myfiles
+		self.mytargets = mytargets
 		check_config_instance(settings)
 		self.path = path
 		self.settings = settings
@@ -70,9 +70,9 @@ class HookFile (object):
 					command.extend(['--opt', myopt])
 			if self.myaction:
 				command.extend(['--action', self.myaction])
-			if self.myfiles:
-				for myfile in self.myfiles:
-					command.extend(['--file', myfile])
+			if self.mytargets:
+				for mytarget in self.mytargets:
+					command.extend(['--target', mytarget])
 			
 			command=[BASH_BINARY, '-c', 'source ' + PORTAGE_BIN_PATH + '/isolated-functions.sh && source ' + ' '.join(command)]
 			code = spawn(mycommand=command, env=self.settings.environ())
-- 
1.6.4.4

