From ae8db6ea97e4c3a0eeaf512fea4263478ed56c31 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 01:26:12 -0400
Subject: [PATCH 06/52] Fixed a lot of bugs, thanks to testing :)

---
 pym/portage/hooks.py |   33 ++++++++++++++++++++++-----------
 1 files changed, 22 insertions(+), 11 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index b6126fa..3b9dbef 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -3,36 +3,47 @@
 # $Id$
 
 # TODO: following may be harmful, but helpful for debugging
-import os, sys
-import os.path as osp
-sys.path.insert(0, osp.dirname(osp.dirname(osp.abspath(__file__))))
+#import os, sys
+#import os.path as osp
+#sys.path.insert(0, osp.dirname(osp.dirname(osp.abspath(__file__))))
 
 from portage.const import BASH_BINARY, HOOKS_PATH
 from portage import os
 from portage import check_config_instance
+from portage import normalize_path
+from portage.exception import PortageException
+from portage.exception import InvalidLocation
 from process import spawn
 
-class hooks(object):
+class HookDirectory(object):
 
 	def __init__ (self, phase, settings):
-		check_config_instace(settings)
+		check_config_instance(settings)
 		self.settings = settings
-		self.path = os.path.join(HOOKS_PATH, phase + ".d")
+		self.path = os.path.join(settings["PORTAGE_CONFIGROOT"], HOOKS_PATH, phase + '.d')
 
-	def execute (self):
+	def execute (self, path=None):
 		if not path:
 			path = self.path
-			
+		
 		path = normalize_path(path)
 		
+		if not os.path.exists(path):
+			raise InvalidLocation('This hooks path could not be found: ' + path)
+		
 		if os.path.isdir(path):
 			for parent, dirs, files in os.walk(path):
 				for filename in files:
 					if filename[:1] == '.':
 						continue
-					self.execute(os.path.join(path, filename))
+					else:
+						self.execute(os.path.join(path, filename))
 		
 		elif os.path.isfile(path):
-			code = spawn(mycommand=[BASH_BINARY, path], env=mysettings.environ())
+			code = spawn(mycommand=[BASH_BINARY, path], env=self.settings.environ())
 			if code: # if failure
-				raise portage.exception.PortageException("!!! Hook %s failed with exit code %s" % (path, code))
+				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
+
+if __name__ == "__main__": # TODO: debug
+	from portage.package.ebuild.config import config
+	HookDirectory('run', config()).execute()
-- 
1.6.4.4

