From 05de909421f17201173ea6ccbfea616993caca81 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 21 Jan 2010 22:53:47 -0500
Subject: [PATCH 01/52] Revised mkrelease.sh into mkrelease-git.sh to allow us to produce git-based release tarballs

---
 mkrelease-git.sh |  123 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 123 insertions(+), 0 deletions(-)
 create mode 100755 mkrelease-git.sh

diff --git a/mkrelease-git.sh b/mkrelease-git.sh
new file mode 100755
index 0000000..d90a9c5
--- /dev/null
+++ b/mkrelease-git.sh
@@ -0,0 +1,123 @@
+#!/bin/bash
+
+RELEASE_BUILDDIR=${RELEASE_BUILDDIR:-/var/tmp/portage-release}
+SOURCE_DIR=${RELEASE_BUILDDIR}/checkout
+BRANCH=${BRANCH:-trunk}
+REPOSITORY=git@gitorious.org:neuvoo/portage.git
+BRANCH="master"
+CREATE_TAG=
+CHANGELOG_REVISION=
+UPLOAD_LOCATION=
+
+die() {
+	echo $@
+	echo "Usage: ${0##*/} [--anon] [--branch <branch>] [--changelog-rev <rev>] [-t|--tag] [-u|--upload <location>] [--use-checkout <path>] <version>"
+	exit 1
+}
+
+ARGS=$(getopt -o tu: --long anon,branch:,changelog-rev:,tag,upload:,use-checkout: \
+	-n ${0##*/} -- "$@")
+[ $? != 0 ] && die "initialization error"
+
+eval set -- "${ARGS}"
+
+while true; do
+	case "$1" in
+		--anon)
+			REPOSITORY=git://gitorious.org/neuvoo/portage.git
+			shift
+			;;
+		--changelog-rev)
+			CHANGELOG_REVISION=$2
+			shift 2
+			;;
+		--branch)
+			BRANCH=$2
+			shift 2
+			;;
+		--use-checkout)
+			NO_REMOTE=true
+			SOURCE_DIR=$2
+			shift 2
+			;;
+		-t|--tag)
+			CREATE_TAG=true
+			shift
+			;;
+		-u|--upload)
+			UPLOAD_LOCATION=${2}
+			shift 2
+			;;
+		--)
+			shift
+			break
+			;;
+		*)
+			die "unknown option: $1"
+			;;
+	esac
+done
+
+[ -z "$1" ] && die "Need version argument"
+[ -n "${1/[0-9]*}" ] && die "Invalid version argument"
+
+VERSION=${1}
+RELEASE=portage-${VERSION}
+RELEASE_DIR=${RELEASE_BUILDDIR}/${RELEASE}
+RELEASE_TARBALL="${RELEASE_BUILDDIR}/${RELEASE}.tar.bz2"
+
+echo ">>> Cleaning working directory ${RELEASE_DIR}"
+rm -rf "${RELEASE_DIR}" || die "directory cleanup failed"
+mkdir -p "${RELEASE_DIR}" || die "directory creation failed"
+if [ ! -n "${NO_REMOTE}" ]; then
+	echo ">>> Cleaning working directory ${SOURCE_DIR}"
+	rm -rf "${SOURCE_DIR}" || die "directory cleanup failed"
+	mkdir -p "${SOURCE_DIR}" || die "directory creation failed"
+fi
+cd "${SOURCE_DIR}" || die "SOURCE_DIR doesn't exist?"
+
+if [ ! -n "${NO_REMOTE}" ]; then
+	echo ">>> Starting Git export"
+	git clone "${REPOSITORY}" || die "git clone failed"
+	gitarchive_opts=""
+	[ -n "$CHANGELOG_REVISION" ] && gitarchive_opts=+="${CHANGELOG_REVISION}"
+	git archive $gitarchive_opts | tar -x -C "${SOURCE_DIR}" || die "git export failed"
+fi
+
+echo ">>> Creating Changelog"
+gitlog_opts=""
+[ -n "$CHANGELOG_REVISION" ] && gitlog_opts+=" -r ${CHANGELOG_REVISION}..HEAD"
+git log $gitlog > "${SOURCE_DIR}/ChangeLog" || die "ChangeLog creation failed"
+
+echo ">>> Building release tree"
+cp -a "${SOURCE_DIR}/"{bin,cnf,doc,man,pym,src} "${RELEASE_DIR}/" || die "directory copy failed"
+cp "${SOURCE_DIR}/"{ChangeLog,DEVELOPING,NEWS,RELEASE-NOTES,TEST-NOTES} \
+	"${RELEASE_DIR}/" || die "file copy failed"
+
+cd "${RELEASE_BUILDDIR}"
+
+echo ">>> Creating release tarball ${RELEASE_TARBALL}"
+tar --owner portage --group portage -cjf "${RELEASE_TARBALL}" "${RELEASE}" || \
+	die "tarball creation failed"
+
+DISTDIR=$(portageq distdir)
+if [ -n "${DISTDIR}" -a -d "${DISTDIR}" -a -w "${DISTDIR}" ]; then
+	echo ">>> Copying release tarball into ${DISTDIR}"
+	cp "${RELEASE_TARBALL}" "${DISTDIR}"/ || echo "!!! tarball copy failed"
+fi
+
+if [ -n "${UPLOAD_LOCATION}" ]; then
+	echo ">>> Uploading ${RELEASE_TARBALL} to ${UPLOAD_LOCATION}"
+	scp "${RELEASE_TARBALL}" "dev.gentoo.org:${UPLOAD_LOCATION}" || die "upload failed"
+else
+	echo "${RELEASE_TARBALL} created"
+fi
+
+if [ -n "${CREATE_TAG}" ]; then
+	echo ">>> Tagging ${VERSION} in repository"
+	echo "Tagging not written yet."
+	echo "Please tag ${REPOSITORY}/tags/${VERSION} by hand" # TODO
+#	echo ">>> Tagging ${VERSION} in repository"
+#	svn cp ${SVN_LOCATION} ${REPOSITORY}/tags/${VERSION} || die "tagging failed"
+fi
+
-- 
1.6.4.4

From 7cb0685ff39cdcf80f240f51ac2ff39c634dddbf Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 26 Jan 2010 00:58:43 -0500
Subject: [PATCH 02/52] Begun with some basic hooks code

---
 pym/portage/const.py |    1 +
 pym/portage/hooks.py |   33 +++++++++++++++++++++++++++++++++
 2 files changed, 34 insertions(+), 0 deletions(-)
 create mode 100644 pym/portage/hooks.py

diff --git a/pym/portage/const.py b/pym/portage/const.py
index 95ea76c..33fffd1 100644
--- a/pym/portage/const.py
+++ b/pym/portage/const.py
@@ -35,6 +35,7 @@ MODULES_FILE_PATH        = USER_CONFIG_PATH + "/modules"
 CUSTOM_PROFILE_PATH      = USER_CONFIG_PATH + "/profile"
 USER_VIRTUALS_FILE       = USER_CONFIG_PATH + "/virtuals"
 EBUILD_SH_ENV_FILE       = USER_CONFIG_PATH + "/bashrc"
+HOOKS_PATH               = USER_CONFIG_PATH + "/hooks"
 CUSTOM_MIRRORS_FILE      = USER_CONFIG_PATH + "/mirrors"
 COLOR_MAP_FILE           = USER_CONFIG_PATH + "/color.map"
 PROFILE_PATH             = "etc/make.profile"
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
new file mode 100644
index 0000000..7ffdc82
--- /dev/null
+++ b/pym/portage/hooks.py
@@ -0,0 +1,33 @@
+# Copyright 1998-2010 Gentoo Foundation
+# Distributed under the terms of the GNU General Public License v2
+# $Id$
+
+from portage.const import BASH_BINARY, HOOKS_PATH
+from portage import os
+from portage import check_config_instance
+from process import spawn
+
+class hooks(object):
+
+	def __init__ (self, phase, settings):
+		check_config_instace(settings)
+		self.settings = settings
+		self.path = os.path.join(HOOKS_PATH, phase + ".d")
+
+	def execute (self):
+		if not path:
+			path = self.path
+			
+		path = normalize_path(path)
+		
+		if os.path.isdir(path):
+			for parent, dirs, files in os.walk(path):
+				for filename in files:
+					if filename[:1] == '.':
+						continue
+					self.execute(os.path.join(path, filename))
+		
+		elif os.path.isfile(path):
+			code = spawn(mycommand=[BASH_BINARY, path], env=mysettings.environ())
+			if code: # if failure
+				raise portage.exception.PortageException("!!! Hook %s failed with exit code %s" % (path, code))
-- 
1.6.4.4

From 2d55e4c88d05968ff52a3e4d1e5931c6383f8c34 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Mon, 15 Mar 2010 20:46:23 -0400
Subject: [PATCH 03/52] Added some debug code, but need to be sure it's safe to add

---
 pym/portage/hooks.py |    5 +++++
 1 files changed, 5 insertions(+), 0 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 7ffdc82..b6126fa 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -2,6 +2,11 @@
 # Distributed under the terms of the GNU General Public License v2
 # $Id$
 
+# TODO: following may be harmful, but helpful for debugging
+import os, sys
+import os.path as osp
+sys.path.insert(0, osp.dirname(osp.dirname(osp.abspath(__file__))))
+
 from portage.const import BASH_BINARY, HOOKS_PATH
 from portage import os
 from portage import check_config_instance
-- 
1.6.4.4

From ee62f2b889811f23eac090e713439401eefd2d2c Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sat, 20 Mar 2010 22:51:46 -0400
Subject: [PATCH 04/52] Easier to track mkrelease-git.sh if we denote what version of mkrelease.sh we got it from

---
 mkrelease-git.sh |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/mkrelease-git.sh b/mkrelease-git.sh
index d90a9c5..7fab1bd 100755
--- a/mkrelease-git.sh
+++ b/mkrelease-git.sh
@@ -1,4 +1,5 @@
 #!/bin/bash
+# Based on git commit ba146d138848e05eac17785c876c7ca67c0e7c1d
 
 RELEASE_BUILDDIR=${RELEASE_BUILDDIR:-/var/tmp/portage-release}
 SOURCE_DIR=${RELEASE_BUILDDIR}/checkout
-- 
1.6.4.4

From 3b8359f58a8520b57a48af89e79259e9612076d1 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 01:25:45 -0400
Subject: [PATCH 05/52] Created (basic for now) test suite for hooks

---
 pym/portage/tests/hooks/__init__.py           |    5 ++
 pym/portage/tests/hooks/test_HookDirectory.py |   54 +++++++++++++++++++++++++
 2 files changed, 59 insertions(+), 0 deletions(-)
 create mode 100644 pym/portage/tests/hooks/__init__.py
 create mode 100644 pym/portage/tests/hooks/__test__
 create mode 100644 pym/portage/tests/hooks/test_HookDirectory.py

diff --git a/pym/portage/tests/hooks/__init__.py b/pym/portage/tests/hooks/__init__.py
new file mode 100644
index 0000000..95dfcfc
--- /dev/null
+++ b/pym/portage/tests/hooks/__init__.py
@@ -0,0 +1,5 @@
+# tests/portage/hooks/__init__.py -- Portage Unit Test functionality
+# Copyright 2010 Gentoo Foundation
+# Distributed under the terms of the GNU General Public License v2
+# $Id$
+
diff --git a/pym/portage/tests/hooks/__test__ b/pym/portage/tests/hooks/__test__
new file mode 100644
index 0000000..e69de29
diff --git a/pym/portage/tests/hooks/test_HookDirectory.py b/pym/portage/tests/hooks/test_HookDirectory.py
new file mode 100644
index 0000000..070e07e
--- /dev/null
+++ b/pym/portage/tests/hooks/test_HookDirectory.py
@@ -0,0 +1,54 @@
+# test_HookDirectory.py -- Portage Unit Testing Functionality
+# Copyright 2010 Gentoo Foundation
+# Distributed under the terms of the GNU General Public License v2
+# $Id$
+
+from portage import os
+from portage.hooks import HookDirectory
+from portage.package.ebuild.config import config
+from portage.tests import TestCase
+from tempfile import mkdtemp
+
+class HookDirectoryTestCase(TestCase):
+	
+	def testHookDirectory(self):
+		"""
+		Tests to be sure a hook loads and reads the right settings
+		Based on test_PackageKeywordsFile.py
+		"""
+
+		tmp_dir = self.BuildTmp()
+		try:
+			settings = config()
+			settings["PORTAGE_CONFIGROOT"] = tmp_dir
+			hooks = HookDirectory('test', settings)
+			hooks.execute()
+		finally:
+			self.NukeTmp(tmp_dir)
+	
+	def BuildTmp(self):
+		tmp_dir = mkdtemp()
+		hooks_dir = tmp_dir+'/etc'
+		os.mkdir(hooks_dir)
+		hooks_dir = hooks_dir+'/portage'
+		os.mkdir(hooks_dir)
+		hooks_dir = hooks_dir+'/hooks'
+		os.mkdir(hooks_dir)
+		hooks_dir = hooks_dir+'/test.d'
+		os.mkdir(hooks_dir)
+		
+		f = open(hooks_dir+'/testhook', 'w')
+		f.write('#!/bin/bash\n')
+		f.write('exit 0\n')
+		f.close()
+		
+		return tmp_dir
+
+	def NukeTmp(self, tmp_dir):
+		hooks_dir = tmp_dir+'/etc/portage/hooks/test.d'
+		os.unlink(hooks_dir+'/testhook')
+		os.rmdir(tmp_dir+'/etc/portage/hooks/test.d')
+		os.rmdir(tmp_dir+'/etc/portage/hooks')
+		os.rmdir(tmp_dir+'/etc/portage')
+		os.rmdir(tmp_dir+'/etc')
+		os.rmdir(tmp_dir)
-- 
1.6.4.4

From ae8db6ea97e4c3a0eeaf512fea4263478ed56c31 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 01:26:12 -0400
Subject: [PATCH 06/52] Fixed a lot of bugs, thanks to testing :)

---
 pym/portage/hooks.py |   33 ++++++++++++++++++++++-----------
 1 files changed, 22 insertions(+), 11 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index b6126fa..3b9dbef 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -3,36 +3,47 @@
 # $Id$
 
 # TODO: following may be harmful, but helpful for debugging
-import os, sys
-import os.path as osp
-sys.path.insert(0, osp.dirname(osp.dirname(osp.abspath(__file__))))
+#import os, sys
+#import os.path as osp
+#sys.path.insert(0, osp.dirname(osp.dirname(osp.abspath(__file__))))
 
 from portage.const import BASH_BINARY, HOOKS_PATH
 from portage import os
 from portage import check_config_instance
+from portage import normalize_path
+from portage.exception import PortageException
+from portage.exception import InvalidLocation
 from process import spawn
 
-class hooks(object):
+class HookDirectory(object):
 
 	def __init__ (self, phase, settings):
-		check_config_instace(settings)
+		check_config_instance(settings)
 		self.settings = settings
-		self.path = os.path.join(HOOKS_PATH, phase + ".d")
+		self.path = os.path.join(settings["PORTAGE_CONFIGROOT"], HOOKS_PATH, phase + '.d')
 
-	def execute (self):
+	def execute (self, path=None):
 		if not path:
 			path = self.path
-			
+		
 		path = normalize_path(path)
 		
+		if not os.path.exists(path):
+			raise InvalidLocation('This hooks path could not be found: ' + path)
+		
 		if os.path.isdir(path):
 			for parent, dirs, files in os.walk(path):
 				for filename in files:
 					if filename[:1] == '.':
 						continue
-					self.execute(os.path.join(path, filename))
+					else:
+						self.execute(os.path.join(path, filename))
 		
 		elif os.path.isfile(path):
-			code = spawn(mycommand=[BASH_BINARY, path], env=mysettings.environ())
+			code = spawn(mycommand=[BASH_BINARY, path], env=self.settings.environ())
 			if code: # if failure
-				raise portage.exception.PortageException("!!! Hook %s failed with exit code %s" % (path, code))
+				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
+
+if __name__ == "__main__": # TODO: debug
+	from portage.package.ebuild.config import config
+	HookDirectory('run', config()).execute()
-- 
1.6.4.4

From 4b1ff422920b24d5bb2edf9bed1a2264785a1200 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 17:00:40 -0400
Subject: [PATCH 07/52] Rewrote the HookDirectory object to use HookFile objects, to break up what was to become a monolithic object.

---
 pym/portage/hooks.py                          |   32 ++++++++++++++---
 pym/portage/tests/hooks/test_HookDirectory.py |   45 +++++++++++++------------
 2 files changed, 49 insertions(+), 28 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 3b9dbef..844d17a 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -13,6 +13,7 @@ from portage import check_config_instance
 from portage import normalize_path
 from portage.exception import PortageException
 from portage.exception import InvalidLocation
+from portage.output import EOutput
 from process import spawn
 
 class HookDirectory(object):
@@ -21,6 +22,7 @@ class HookDirectory(object):
 		check_config_instance(settings)
 		self.settings = settings
 		self.path = os.path.join(settings["PORTAGE_CONFIGROOT"], HOOKS_PATH, phase + '.d')
+		self.output = EOutput()
 
 	def execute (self, path=None):
 		if not path:
@@ -29,20 +31,38 @@ class HookDirectory(object):
 		path = normalize_path(path)
 		
 		if not os.path.exists(path):
-			raise InvalidLocation('This hooks path could not be found: ' + path)
+			raise InvalidLocation('This hook path could not be found: ' + path)
 		
 		if os.path.isdir(path):
 			for parent, dirs, files in os.walk(path):
+				for dir in dirs:
+					self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
 				for filename in files:
-					if filename[:1] == '.':
-						continue
-					else:
-						self.execute(os.path.join(path, filename))
+					HookFile(os.path.join(path, filename), self.settings).execute()
 		
-		elif os.path.isfile(path):
+		else:
+			raise InvalidLocation('This hook path ought to be a directory: ' + path)
+
+class HookFile (object):
+	
+	def __init__ (self, path, settings):
+		check_config_instance(settings)
+		self.path = path
+		self.settings = settings
+	
+	def execute (self):
+		path = normalize_path(self.path)
+		
+		if not os.path.exists(path):
+			raise InvalidLocation('This hook path could not be found: ' + path)
+		
+		if os.path.isfile(path):
 			code = spawn(mycommand=[BASH_BINARY, path], env=self.settings.environ())
 			if code: # if failure
 				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
+		
+		else:
+			raise InvalidLocation('This hook path ought to be a file: ' + path)
 
 if __name__ == "__main__": # TODO: debug
 	from portage.package.ebuild.config import config
diff --git a/pym/portage/tests/hooks/test_HookDirectory.py b/pym/portage/tests/hooks/test_HookDirectory.py
index 070e07e..2dbf17c 100644
--- a/pym/portage/tests/hooks/test_HookDirectory.py
+++ b/pym/portage/tests/hooks/test_HookDirectory.py
@@ -17,38 +17,39 @@ class HookDirectoryTestCase(TestCase):
 		Based on test_PackageKeywordsFile.py
 		"""
 
-		tmp_dir = self.BuildTmp()
+		tmp_dirs = ['etc', 'portage', 'hooks', 'test.d']
+		tmp_dir_path = self.BuildTmp(tmp_dirs)
+		tmp_dirs = [tmp_dir_path, 'etc', 'portage', 'hooks', 'test.d']
 		try:
 			settings = config()
-			settings["PORTAGE_CONFIGROOT"] = tmp_dir
+			settings["PORTAGE_CONFIGROOT"] = tmp_dir_path
 			hooks = HookDirectory('test', settings)
 			hooks.execute()
 		finally:
-			self.NukeTmp(tmp_dir)
+			self.NukeTmp(tmp_dirs)
 	
-	def BuildTmp(self):
-		tmp_dir = mkdtemp()
-		hooks_dir = tmp_dir+'/etc'
-		os.mkdir(hooks_dir)
-		hooks_dir = hooks_dir+'/portage'
-		os.mkdir(hooks_dir)
-		hooks_dir = hooks_dir+'/hooks'
-		os.mkdir(hooks_dir)
-		hooks_dir = hooks_dir+'/test.d'
-		os.mkdir(hooks_dir)
+	def BuildTmp(self, tmp_subdirs):
+		tmp_dir_path = mkdtemp()
+		hooks_dir = tmp_dir_path
+		for tmp_subdir in tmp_subdirs:
+			hooks_dir = hooks_dir + '/' + tmp_subdir
+			os.mkdir(hooks_dir)
 		
 		f = open(hooks_dir+'/testhook', 'w')
 		f.write('#!/bin/bash\n')
 		f.write('exit 0\n')
 		f.close()
 		
-		return tmp_dir
+		return tmp_dir_path
 
-	def NukeTmp(self, tmp_dir):
-		hooks_dir = tmp_dir+'/etc/portage/hooks/test.d'
-		os.unlink(hooks_dir+'/testhook')
-		os.rmdir(tmp_dir+'/etc/portage/hooks/test.d')
-		os.rmdir(tmp_dir+'/etc/portage/hooks')
-		os.rmdir(tmp_dir+'/etc/portage')
-		os.rmdir(tmp_dir+'/etc')
-		os.rmdir(tmp_dir)
+	def NukeTmp(self, tmp_dirs):
+		tmp_dir_paths = []
+		curr_path = ''
+		for tmp_dir in tmp_dirs:
+			curr_path = curr_path + '/' + tmp_dir
+			tmp_dir_paths.append(curr_path)
+		
+		tmp_dir_paths.reverse()
+		os.unlink(curr_path+'/testhook')
+		for tmp_dir_path in tmp_dir_paths:
+			os.rmdir(tmp_dir_path)
-- 
1.6.4.4

From 34520518689119b66a0bbe84cffafd8188723d2a Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 17:02:43 -0400
Subject: [PATCH 08/52] Found pre-run location; about to test

---
 pym/_emerge/main.py |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index e725da8..b1f9068 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1180,6 +1180,7 @@ def emerge_main():
 	# Portage needs to ensure a sane umask for the files it creates.
 	os.umask(0o22)
 	settings, trees, mtimedb = load_emerge_config()
+	HookDirectory('pre-run', settings).execute()
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
-- 
1.6.4.4

From ad9616e95bc78b3dd8c876d888a607065762e200 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 18:38:20 -0400
Subject: [PATCH 09/52] Fixed some bugs in the mkrelease-git.sh code that kept it from checking out the latest trunk properly

---
 mkrelease-git.sh |    5 ++---
 1 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/mkrelease-git.sh b/mkrelease-git.sh
index 7fab1bd..4c22d39 100755
--- a/mkrelease-git.sh
+++ b/mkrelease-git.sh
@@ -79,10 +79,9 @@ cd "${SOURCE_DIR}" || die "SOURCE_DIR doesn't exist?"
 
 if [ ! -n "${NO_REMOTE}" ]; then
 	echo ">>> Starting Git export"
-	git clone "${REPOSITORY}" || die "git clone failed"
+	git clone "${REPOSITORY}" . || die "git clone failed"
 	gitarchive_opts=""
-	[ -n "$CHANGELOG_REVISION" ] && gitarchive_opts=+="${CHANGELOG_REVISION}"
-	git archive $gitarchive_opts | tar -x -C "${SOURCE_DIR}" || die "git export failed"
+	[ -n "$CHANGELOG_REVISION" ] && ( git reset "$CHANGELOG_REVISION" || die "git reset failed" )
 fi
 
 echo ">>> Creating Changelog"
-- 
1.6.4.4

From 6a8765de45d1ab113f956cb40bfa942b8502266f Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 18:39:01 -0400
Subject: [PATCH 10/52] Only allow hooks to be run when the user requests them; and do not fail on a non-existant hooks directory

---
 pym/_emerge/main.py  |    3 ++-
 pym/portage/hooks.py |    3 ++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index b1f9068..b2b74ea 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1180,7 +1180,8 @@ def emerge_main():
 	# Portage needs to ensure a sane umask for the files it creates.
 	os.umask(0o22)
 	settings, trees, mtimedb = load_emerge_config()
-	HookDirectory('pre-run', settings).execute()
+	if "hooks" in settings['FEATURES']:
+		HookDirectory('pre-run', settings).execute()
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 844d17a..39ed413 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -31,7 +31,8 @@ class HookDirectory(object):
 		path = normalize_path(path)
 		
 		if not os.path.exists(path):
-			raise InvalidLocation('This hook path could not be found: ' + path)
+			self.output.warn('This hook path could not be found: ' + path)
+			return
 		
 		if os.path.isdir(path):
 			for parent, dirs, files in os.walk(path):
-- 
1.6.4.4

From 17893780e1522beebc0ff683fa51895dd2e5f6d3 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 18:41:03 -0400
Subject: [PATCH 11/52] Duh: proper importing of hooks into _emerge/main.py :P

---
 pym/_emerge/main.py |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index b2b74ea..b06ace8 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -28,6 +28,7 @@ bad = create_color_func("BAD")
 import portage.elog
 import portage.dep
 portage.dep._dep_check_strict = True
+import portage.hooks
 import portage.util
 import portage.locks
 import portage.exception
@@ -1181,7 +1182,7 @@ def emerge_main():
 	os.umask(0o22)
 	settings, trees, mtimedb = load_emerge_config()
 	if "hooks" in settings['FEATURES']:
-		HookDirectory('pre-run', settings).execute()
+		portage.hooks.HookDirectory('pre-run', settings).execute()
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
-- 
1.6.4.4

From f96193507c1a935b5ab26981fc1585ffb2731f84 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 19:23:19 -0400
Subject: [PATCH 12/52] Added ability to receive options, action, and files into hooks

---
 pym/_emerge/main.py  |    2 +-
 pym/portage/hooks.py |   26 +++++++++++++++++++++-----
 2 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index b06ace8..d61d91e 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1182,7 +1182,7 @@ def emerge_main():
 	os.umask(0o22)
 	settings, trees, mtimedb = load_emerge_config()
 	if "hooks" in settings['FEATURES']:
-		portage.hooks.HookDirectory('pre-run', settings).execute()
+		portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, myfiles=myfiles).execute()
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 39ed413..17f3148 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -18,7 +18,10 @@ from process import spawn
 
 class HookDirectory(object):
 
-	def __init__ (self, phase, settings):
+	def __init__ (self, phase, settings, myopts=None, myaction=None, myfiles=None):
+		self.myopts = myopts
+		self.myaction = myaction
+		self.myfiles = myfiles
 		check_config_instance(settings)
 		self.settings = settings
 		self.path = os.path.join(settings["PORTAGE_CONFIGROOT"], HOOKS_PATH, phase + '.d')
@@ -31,7 +34,7 @@ class HookDirectory(object):
 		path = normalize_path(path)
 		
 		if not os.path.exists(path):
-			self.output.warn('This hook path could not be found: ' + path)
+			self.output.ewarn('This hook path could not be found: ' + path)
 			return
 		
 		if os.path.isdir(path):
@@ -39,14 +42,17 @@ class HookDirectory(object):
 				for dir in dirs:
 					self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
 				for filename in files:
-					HookFile(os.path.join(path, filename), self.settings).execute()
+					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.myfiles).execute()
 		
 		else:
 			raise InvalidLocation('This hook path ought to be a directory: ' + path)
 
 class HookFile (object):
 	
-	def __init__ (self, path, settings):
+	def __init__ (self, path, settings, myopts=None, myaction=None, myfiles=None):
+		self.myopts = myopts
+		self.myaction = myaction
+		self.myfiles = myfiles
 		check_config_instance(settings)
 		self.path = path
 		self.settings = settings
@@ -58,7 +64,17 @@ class HookFile (object):
 			raise InvalidLocation('This hook path could not be found: ' + path)
 		
 		if os.path.isfile(path):
-			code = spawn(mycommand=[BASH_BINARY, path], env=self.settings.environ())
+			command=[BASH_BINARY, path]
+			if self.myopts:
+				for myopt in myopts:
+					command.extend(['--opt', myopt])
+			if self.myaction:
+				command.extend(['--action', myaction])
+			if self.myfiles:
+				for myfile in myfiles:
+					command.extend(['--file', myfile])
+			
+			code = spawn(mycommand=command, env=self.settings.environ())
 			if code: # if failure
 				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
 		
-- 
1.6.4.4

From 32e0333c2d1df9958023d742228f4d24fc0f8729 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 19:36:55 -0400
Subject: [PATCH 13/52] Fixed some bugs where variables were assumed to be global but weren't

---
 pym/portage/hooks.py |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 17f3148..ccdc85f 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -66,12 +66,12 @@ class HookFile (object):
 		if os.path.isfile(path):
 			command=[BASH_BINARY, path]
 			if self.myopts:
-				for myopt in myopts:
+				for myopt in self.myopts:
 					command.extend(['--opt', myopt])
 			if self.myaction:
-				command.extend(['--action', myaction])
+				command.extend(['--action', self.myaction])
 			if self.myfiles:
-				for myfile in myfiles:
+				for myfile in self.myfiles:
 					command.extend(['--file', myfile])
 			
 			code = spawn(mycommand=command, env=self.settings.environ())
-- 
1.6.4.4

From d9a829ea52838e9e3adf474df7b3f14b1587d1db Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 19:49:48 -0400
Subject: [PATCH 14/52] Style adjustments, to make the position of the pre-run hook clearer

---
 pym/_emerge/main.py |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index d61d91e..90d13fe 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1181,9 +1181,12 @@ def emerge_main():
 	# Portage needs to ensure a sane umask for the files it creates.
 	os.umask(0o22)
 	settings, trees, mtimedb = load_emerge_config()
+	portdb = trees[settings["ROOT"]]["porttree"].dbapi
+
+	# Portage configured; let's let a hook set everything up before we do anything more
 	if "hooks" in settings['FEATURES']:
 		portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, myfiles=myfiles).execute()
-	portdb = trees[settings["ROOT"]]["porttree"].dbapi
+
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
 		return rval
-- 
1.6.4.4

From 159528f1ee1a0c8b16c7bf836994ee2d564fffd9 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 19:53:42 -0400
Subject: [PATCH 15/52] Now hooks get the isolated-functions.sh file for extra functionality

---
 pym/portage/hooks.py |    5 +++--
 1 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index ccdc85f..4a5c6bd 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -7,7 +7,7 @@
 #import os.path as osp
 #sys.path.insert(0, osp.dirname(osp.dirname(osp.abspath(__file__))))
 
-from portage.const import BASH_BINARY, HOOKS_PATH
+from portage.const import BASH_BINARY, HOOKS_PATH, PORTAGE_BIN_PATH
 from portage import os
 from portage import check_config_instance
 from portage import normalize_path
@@ -64,7 +64,7 @@ class HookFile (object):
 			raise InvalidLocation('This hook path could not be found: ' + path)
 		
 		if os.path.isfile(path):
-			command=[BASH_BINARY, path]
+			command=[path]
 			if self.myopts:
 				for myopt in self.myopts:
 					command.extend(['--opt', myopt])
@@ -74,6 +74,7 @@ class HookFile (object):
 				for myfile in self.myfiles:
 					command.extend(['--file', myfile])
 			
+			command=[BASH_BINARY, '-c', 'source ' + PORTAGE_BIN_PATH + '/isolated-functions.sh && ' + ' '.join(command)]
 			code = spawn(mycommand=command, env=self.settings.environ())
 			if code: # if failure
 				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
-- 
1.6.4.4

From 76bdf7463f8d72e4d4823d42071cba5234fd30d2 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sun, 21 Mar 2010 20:03:58 -0400
Subject: [PATCH 16/52] Fixed a small bug where isolated-functions.sh didn't affect the hook's environment at all

---
 pym/portage/hooks.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 4a5c6bd..4a44b6e 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -74,7 +74,7 @@ class HookFile (object):
 				for myfile in self.myfiles:
 					command.extend(['--file', myfile])
 			
-			command=[BASH_BINARY, '-c', 'source ' + PORTAGE_BIN_PATH + '/isolated-functions.sh && ' + ' '.join(command)]
+			command=[BASH_BINARY, '-c', 'source ' + PORTAGE_BIN_PATH + '/isolated-functions.sh && source ' + ' '.join(command)]
 			code = spawn(mycommand=command, env=self.settings.environ())
 			if code: # if failure
 				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
-- 
1.6.4.4

From 46f57af26aa0c2448bf3921a8a1fc1342f891ccd Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Mon, 19 Apr 2010 01:41:55 -0400
Subject: [PATCH 17/52] Changed myfiles to mytargets. Makes much more sense with that name

---
 pym/_emerge/main.py  |    2 +-
 pym/portage/hooks.py |   16 ++++++++--------
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index 90d13fe..545ca28 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1185,7 +1185,7 @@ def emerge_main():
 
 	# Portage configured; let's let a hook set everything up before we do anything more
 	if "hooks" in settings['FEATURES']:
-		portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, myfiles=myfiles).execute()
+		portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute()
 
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 4a44b6e..7a5e9fb 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -18,10 +18,10 @@ from process import spawn
 
 class HookDirectory(object):
 
-	def __init__ (self, phase, settings, myopts=None, myaction=None, myfiles=None):
+	def __init__ (self, phase, settings, myopts=None, myaction=None, mytargets=None):
 		self.myopts = myopts
 		self.myaction = myaction
-		self.myfiles = myfiles
+		self.mytargets = mytargets
 		check_config_instance(settings)
 		self.settings = settings
 		self.path = os.path.join(settings["PORTAGE_CONFIGROOT"], HOOKS_PATH, phase + '.d')
@@ -42,17 +42,17 @@ class HookDirectory(object):
 				for dir in dirs:
 					self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
 				for filename in files:
-					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.myfiles).execute()
+					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.mytargets).execute()
 		
 		else:
 			raise InvalidLocation('This hook path ought to be a directory: ' + path)
 
 class HookFile (object):
 	
-	def __init__ (self, path, settings, myopts=None, myaction=None, myfiles=None):
+	def __init__ (self, path, settings, myopts=None, myaction=None, mytargets=None):
 		self.myopts = myopts
 		self.myaction = myaction
-		self.myfiles = myfiles
+		self.mytargets = mytargets
 		check_config_instance(settings)
 		self.path = path
 		self.settings = settings
@@ -70,9 +70,9 @@ class HookFile (object):
 					command.extend(['--opt', myopt])
 			if self.myaction:
 				command.extend(['--action', self.myaction])
-			if self.myfiles:
-				for myfile in self.myfiles:
-					command.extend(['--file', myfile])
+			if self.mytargets:
+				for mytarget in self.mytargets:
+					command.extend(['--target', mytarget])
 			
 			command=[BASH_BINARY, '-c', 'source ' + PORTAGE_BIN_PATH + '/isolated-functions.sh && source ' + ' '.join(command)]
 			code = spawn(mycommand=command, env=self.settings.environ())
-- 
1.6.4.4

From 7137ab5ef9321c815020ebe0f9a70ddbee727f6a Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Mon, 19 Apr 2010 01:46:05 -0400
Subject: [PATCH 18/52] Added pre- and post-ebuild functionality

---
 pym/portage/package/ebuild/doebuild.py |   50 ++++++++++++++++++++++++++++---
 1 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 4ca74e5..9c6f6f0 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -532,10 +532,13 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		doebuild_environment(myebuild, mydo, myroot, mysettings, debug,
 			use_cache, mydbapi)
 
+		portage.hooks.HookDirectory(phase='pre-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+
 		if mydo in clean_phases:
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " clean",
 				mysettings, debug=debug, fd_pipes=fd_pipes, free=1,
 				logfile=None, returnpid=returnpid)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		restrict = set(mysettings.get('PORTAGE_RESTRICT', '').split())
@@ -547,6 +550,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				mypids = spawn(_shell_quote(ebuild_sh_binary) + " depend",
 					mysettings, fd_pipes=fd_pipes, returnpid=True,
 					droppriv=droppriv)
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return mypids
 			elif isinstance(dbkey, dict):
 				mysettings["dbkey"] = ""
@@ -579,6 +583,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					# Don't trust bash's returncode if the
 					# number of lines is incorrect.
 					retval = 1
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 			elif dbkey:
 				mysettings["dbkey"] = dbkey
@@ -586,9 +591,11 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				mysettings["dbkey"] = \
 					os.path.join(mysettings.depcachedir, "aux_db_key_temp")
 
-			return spawn(_shell_quote(ebuild_sh_binary) + " depend",
+			retval = spawn(_shell_quote(ebuild_sh_binary) + " depend",
 				mysettings,
 				droppriv=droppriv)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			return retval
 
 		# Validate dependency metadata here to ensure that ebuilds with invalid
 		# data are never installed via the ebuild command. Don't bother when
@@ -597,6 +604,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if not returnpid:
 			rval = _validate_deps(mysettings, myroot, mydo, mydbapi)
 			if rval != os.EX_OK:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return rval
 
 		if "PORTAGE_TMPDIR" not in mysettings or \
@@ -605,6 +613,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				"PORTAGE_TMPDIR variable, '%s',\n"
 				"does not exist.  Please create this directory or "
 				"correct your PORTAGE_TMPDIR setting.\n") % mysettings.get("PORTAGE_TMPDIR", ""), noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 		
 		# as some people use a separate PORTAGE_TMPDIR mount
@@ -619,6 +628,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			writemsg(_("%s is not writable.\n"
 				"Likely cause is that you've mounted it as readonly.\n") % checkdir,
 				noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 		else:
 			fd = tempfile.NamedTemporaryFile(prefix="exectest-", dir=checkdir)
@@ -630,13 +640,16 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					"Please make sure that portage can execute files in this directory.\n") % checkdir,
 					noiselevel=-1)
 				fd.close()
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			fd.close()
 		del checkdir
 
 		if mydo == "unmerge":
-			return unmerge(mysettings["CATEGORY"],
+			retval = unmerge(mysettings["CATEGORY"],
 				mysettings["PF"], myroot, mysettings, vartree=vartree)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			return retval
 
 		# Build directory creation isn't required for any of these.
 		# In the fetch phase, the directory is needed only for RESTRICT=fetch
@@ -648,6 +661,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			not (mydo == 'fetch' and 'fetch' not in restrict):
 			mystatus = prepare_build_dirs(myroot, mysettings, cleanup)
 			if mystatus:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return mystatus
 			have_build_dirs = True
 
@@ -716,6 +730,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					for line in wrap(msg, 70):
 						eerror(line, phase="setup", key=mysettings.mycpv)
 					elog_process(mysettings.mycpv, mysettings)
+					portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 					return 1
 			del env_file, env_stat, saved_env
 			_doebuild_exit_status_unlink(
@@ -726,14 +741,17 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		# if any of these are being called, handle them -- running them out of
 		# the sandbox -- and stop now.
 		if mydo == "help":
-			return spawn(_shell_quote(ebuild_sh_binary) + " " + mydo,
+			retval = spawn(_shell_quote(ebuild_sh_binary) + " " + mydo,
 				mysettings, debug=debug, free=1, logfile=logfile)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			return retval
 		elif mydo == "setup":
 			retval = spawn(
 				_shell_quote(ebuild_sh_binary) + " " + mydo, mysettings,
 				debug=debug, free=1, logfile=logfile, fd_pipes=fd_pipes,
 				returnpid=returnpid)
 			if returnpid:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 			retval = exit_status_check(retval)
 			if secpass >= 2:
@@ -742,6 +760,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				apply_recursive_permissions(mysettings["T"],
 					uid=portage_uid, gid=portage_gid, dirmode=0o70, dirmask=0,
 					filemode=0o60, filemask=0)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 		elif mydo == "preinst":
 			phase_retval = spawn(
@@ -750,6 +769,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return phase_retval
 
 			phase_retval = exit_status_check(phase_retval)
@@ -764,6 +784,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				if phase_retval != os.EX_OK:
 					writemsg(_("!!! post preinst failed; exiting.\n"),
 						noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return phase_retval
 		elif mydo == "postinst":
 			phase_retval = spawn(
@@ -772,6 +793,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return phase_retval
 
 			phase_retval = exit_status_check(phase_retval)
@@ -785,6 +807,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				if phase_retval != os.EX_OK:
 					writemsg(_("!!! post postinst failed; exiting.\n"),
 						noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return phase_retval
 		elif mydo in ("prerm", "postrm", "config", "info"):
 			retval =  spawn(
@@ -793,9 +816,11 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 
 			retval = exit_status_check(retval)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		mycpv = "/".join((mysettings["CATEGORY"], mysettings["PF"]))
@@ -825,6 +850,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				writemsg(_("!!! Invalid SRC_URI for '%s'.\n") % mycpv,
 					noiselevel=-1)
 				del e
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			mysettings.configdict["pkg"]["A"] = " ".join(alist)
 			mysettings.configdict["pkg"]["AA"] = " ".join(aalist)
@@ -836,6 +862,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					fetchme = alist
 				if not fetch(fetchme, mysettings, listonly=listonly,
 					fetchonly=fetchonly):
+					portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 					return 1
 
 		else:
@@ -850,13 +877,18 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			checkme = alist
 
 		if mydo == "fetch" and listonly:
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 0
 
 		try:
 			if mydo == "manifest":
-				return not digestgen(mysettings=mysettings, myportdb=mydbapi)
+				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				return not retval
 			elif mydo == "digest":
-				return not digestgen(mysettings=mysettings, myportdb=mydbapi)
+				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				return not retval
 			elif mydo != 'fetch' and not emerge_skip_digest and \
 				"digest" in mysettings.features:
 				# Don't do this when called by emerge or when called just
@@ -866,14 +898,17 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		except PermissionDenied as e:
 			writemsg(_("!!! Permission Denied: %s\n") % (e,), noiselevel=-1)
 			if mydo in ("digest", "manifest"):
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 
 		# See above comment about fetching only when needed
 		if not emerge_skip_distfiles and \
 			not digestcheck(checkme, mysettings, "strict" in features):
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
 		if mydo == "fetch":
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 0
 
 		# remove PORTAGE_ACTUAL_DISTDIR once cvs/svn is supported via SRC_URI
@@ -977,6 +1012,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				os.path.join(mysettings["PORTAGE_BUILDDIR"], ".installed")):
 				writemsg(_("!!! mydo=qmerge, but the install phase has not been run\n"),
 					noiselevel=-1)
+				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			# qmerge is a special phase that implies noclean.
 			if "noclean" not in mysettings.features:
@@ -1005,8 +1041,10 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					vartree=vartree, prev_mtimes=prev_mtimes)
 		else:
 			writemsg_stdout(_("!!! Unknown mydo: %s\n") % mydo, noiselevel=-1)
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
+		portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 		return retval
 
 	finally:
@@ -1078,8 +1116,10 @@ def _validate_deps(mysettings, myroot, mydo, mydbapi):
 			portage.util.writemsg_level(x,
 				level=logging.ERROR, noiselevel=-1)
 		if mydo not in invalid_dep_exempt_phases:
+			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
+	portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 	return os.EX_OK
 
 # XXX This would be to replace getstatusoutput completely.
-- 
1.6.4.4

From 2e0fdcad3f7894e2ef9d91aac2d0342e8c0e6bdc Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Mon, 19 Apr 2010 01:55:50 -0400
Subject: [PATCH 19/52] Gah. Forgot to import hooks into doebuild.py.

---
 pym/portage/package/ebuild/doebuild.py |   69 ++++++++++++++++----------------
 1 files changed, 35 insertions(+), 34 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 9c6f6f0..006c7bc 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -45,6 +45,7 @@ from portage.elog.messages import eerror, eqawarn
 from portage.exception import DigestException, FileNotFound, \
 	IncorrectParameter, InvalidAtom, InvalidDependString, PermissionDenied, \
 	UnsupportedAPIException
+from portage.hooks import HookDirectory
 from portage.localization import _
 from portage.manifest import Manifest
 from portage.output import style_to_ansi_code
@@ -532,13 +533,13 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		doebuild_environment(myebuild, mydo, myroot, mysettings, debug,
 			use_cache, mydbapi)
 
-		portage.hooks.HookDirectory(phase='pre-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+		HookDirectory(phase='pre-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 
 		if mydo in clean_phases:
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " clean",
 				mysettings, debug=debug, fd_pipes=fd_pipes, free=1,
 				logfile=None, returnpid=returnpid)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		restrict = set(mysettings.get('PORTAGE_RESTRICT', '').split())
@@ -550,7 +551,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				mypids = spawn(_shell_quote(ebuild_sh_binary) + " depend",
 					mysettings, fd_pipes=fd_pipes, returnpid=True,
 					droppriv=droppriv)
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return mypids
 			elif isinstance(dbkey, dict):
 				mysettings["dbkey"] = ""
@@ -583,7 +584,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					# Don't trust bash's returncode if the
 					# number of lines is incorrect.
 					retval = 1
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 			elif dbkey:
 				mysettings["dbkey"] = dbkey
@@ -594,7 +595,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " depend",
 				mysettings,
 				droppriv=droppriv)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		# Validate dependency metadata here to ensure that ebuilds with invalid
@@ -604,7 +605,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if not returnpid:
 			rval = _validate_deps(mysettings, myroot, mydo, mydbapi)
 			if rval != os.EX_OK:
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return rval
 
 		if "PORTAGE_TMPDIR" not in mysettings or \
@@ -613,7 +614,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				"PORTAGE_TMPDIR variable, '%s',\n"
 				"does not exist.  Please create this directory or "
 				"correct your PORTAGE_TMPDIR setting.\n") % mysettings.get("PORTAGE_TMPDIR", ""), noiselevel=-1)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 		
 		# as some people use a separate PORTAGE_TMPDIR mount
@@ -628,7 +629,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			writemsg(_("%s is not writable.\n"
 				"Likely cause is that you've mounted it as readonly.\n") % checkdir,
 				noiselevel=-1)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 		else:
 			fd = tempfile.NamedTemporaryFile(prefix="exectest-", dir=checkdir)
@@ -640,7 +641,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					"Please make sure that portage can execute files in this directory.\n") % checkdir,
 					noiselevel=-1)
 				fd.close()
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			fd.close()
 		del checkdir
@@ -648,7 +649,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if mydo == "unmerge":
 			retval = unmerge(mysettings["CATEGORY"],
 				mysettings["PF"], myroot, mysettings, vartree=vartree)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		# Build directory creation isn't required for any of these.
@@ -661,7 +662,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			not (mydo == 'fetch' and 'fetch' not in restrict):
 			mystatus = prepare_build_dirs(myroot, mysettings, cleanup)
 			if mystatus:
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return mystatus
 			have_build_dirs = True
 
@@ -730,7 +731,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					for line in wrap(msg, 70):
 						eerror(line, phase="setup", key=mysettings.mycpv)
 					elog_process(mysettings.mycpv, mysettings)
-					portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+					HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 					return 1
 			del env_file, env_stat, saved_env
 			_doebuild_exit_status_unlink(
@@ -743,7 +744,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if mydo == "help":
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " " + mydo,
 				mysettings, debug=debug, free=1, logfile=logfile)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 		elif mydo == "setup":
 			retval = spawn(
@@ -751,7 +752,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				debug=debug, free=1, logfile=logfile, fd_pipes=fd_pipes,
 				returnpid=returnpid)
 			if returnpid:
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 			retval = exit_status_check(retval)
 			if secpass >= 2:
@@ -760,7 +761,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				apply_recursive_permissions(mysettings["T"],
 					uid=portage_uid, gid=portage_gid, dirmode=0o70, dirmask=0,
 					filemode=0o60, filemask=0)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 		elif mydo == "preinst":
 			phase_retval = spawn(
@@ -769,7 +770,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return phase_retval
 
 			phase_retval = exit_status_check(phase_retval)
@@ -784,7 +785,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				if phase_retval != os.EX_OK:
 					writemsg(_("!!! post preinst failed; exiting.\n"),
 						noiselevel=-1)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return phase_retval
 		elif mydo == "postinst":
 			phase_retval = spawn(
@@ -793,7 +794,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return phase_retval
 
 			phase_retval = exit_status_check(phase_retval)
@@ -807,7 +808,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				if phase_retval != os.EX_OK:
 					writemsg(_("!!! post postinst failed; exiting.\n"),
 						noiselevel=-1)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return phase_retval
 		elif mydo in ("prerm", "postrm", "config", "info"):
 			retval =  spawn(
@@ -816,11 +817,11 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 
 			retval = exit_status_check(retval)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		mycpv = "/".join((mysettings["CATEGORY"], mysettings["PF"]))
@@ -850,7 +851,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				writemsg(_("!!! Invalid SRC_URI for '%s'.\n") % mycpv,
 					noiselevel=-1)
 				del e
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			mysettings.configdict["pkg"]["A"] = " ".join(alist)
 			mysettings.configdict["pkg"]["AA"] = " ".join(aalist)
@@ -862,7 +863,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					fetchme = alist
 				if not fetch(fetchme, mysettings, listonly=listonly,
 					fetchonly=fetchonly):
-					portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+					HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 					return 1
 
 		else:
@@ -877,17 +878,17 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			checkme = alist
 
 		if mydo == "fetch" and listonly:
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 0
 
 		try:
 			if mydo == "manifest":
 				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return not retval
 			elif mydo == "digest":
 				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return not retval
 			elif mydo != 'fetch' and not emerge_skip_digest and \
 				"digest" in mysettings.features:
@@ -898,17 +899,17 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		except PermissionDenied as e:
 			writemsg(_("!!! Permission Denied: %s\n") % (e,), noiselevel=-1)
 			if mydo in ("digest", "manifest"):
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 
 		# See above comment about fetching only when needed
 		if not emerge_skip_distfiles and \
 			not digestcheck(checkme, mysettings, "strict" in features):
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
 		if mydo == "fetch":
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 0
 
 		# remove PORTAGE_ACTUAL_DISTDIR once cvs/svn is supported via SRC_URI
@@ -1012,7 +1013,7 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				os.path.join(mysettings["PORTAGE_BUILDDIR"], ".installed")):
 				writemsg(_("!!! mydo=qmerge, but the install phase has not been run\n"),
 					noiselevel=-1)
-				portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			# qmerge is a special phase that implies noclean.
 			if "noclean" not in mysettings.features:
@@ -1041,10 +1042,10 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					vartree=vartree, prev_mtimes=prev_mtimes)
 		else:
 			writemsg_stdout(_("!!! Unknown mydo: %s\n") % mydo, noiselevel=-1)
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
-		portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+		HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 		return retval
 
 	finally:
@@ -1116,10 +1117,10 @@ def _validate_deps(mysettings, myroot, mydo, mydbapi):
 			portage.util.writemsg_level(x,
 				level=logging.ERROR, noiselevel=-1)
 		if mydo not in invalid_dep_exempt_phases:
-			portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
-	portage.hooks.HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
+	HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 	return os.EX_OK
 
 # XXX This would be to replace getstatusoutput completely.
-- 
1.6.4.4

From 4c99b51e2a3e5ba6dc38a5335632a2e76830a3f9 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 19:44:56 -0400
Subject: [PATCH 20/52] mkrelease.sh is now in git format, so this mkrelease-git.sh hack is not needed.

---
 mkrelease-git.sh |  123 ------------------------------------------------------
 1 files changed, 0 insertions(+), 123 deletions(-)
 delete mode 100755 mkrelease-git.sh

diff --git a/mkrelease-git.sh b/mkrelease-git.sh
deleted file mode 100755
index 4c22d39..0000000
--- a/mkrelease-git.sh
+++ /dev/null
@@ -1,123 +0,0 @@
-#!/bin/bash
-# Based on git commit ba146d138848e05eac17785c876c7ca67c0e7c1d
-
-RELEASE_BUILDDIR=${RELEASE_BUILDDIR:-/var/tmp/portage-release}
-SOURCE_DIR=${RELEASE_BUILDDIR}/checkout
-BRANCH=${BRANCH:-trunk}
-REPOSITORY=git@gitorious.org:neuvoo/portage.git
-BRANCH="master"
-CREATE_TAG=
-CHANGELOG_REVISION=
-UPLOAD_LOCATION=
-
-die() {
-	echo $@
-	echo "Usage: ${0##*/} [--anon] [--branch <branch>] [--changelog-rev <rev>] [-t|--tag] [-u|--upload <location>] [--use-checkout <path>] <version>"
-	exit 1
-}
-
-ARGS=$(getopt -o tu: --long anon,branch:,changelog-rev:,tag,upload:,use-checkout: \
-	-n ${0##*/} -- "$@")
-[ $? != 0 ] && die "initialization error"
-
-eval set -- "${ARGS}"
-
-while true; do
-	case "$1" in
-		--anon)
-			REPOSITORY=git://gitorious.org/neuvoo/portage.git
-			shift
-			;;
-		--changelog-rev)
-			CHANGELOG_REVISION=$2
-			shift 2
-			;;
-		--branch)
-			BRANCH=$2
-			shift 2
-			;;
-		--use-checkout)
-			NO_REMOTE=true
-			SOURCE_DIR=$2
-			shift 2
-			;;
-		-t|--tag)
-			CREATE_TAG=true
-			shift
-			;;
-		-u|--upload)
-			UPLOAD_LOCATION=${2}
-			shift 2
-			;;
-		--)
-			shift
-			break
-			;;
-		*)
-			die "unknown option: $1"
-			;;
-	esac
-done
-
-[ -z "$1" ] && die "Need version argument"
-[ -n "${1/[0-9]*}" ] && die "Invalid version argument"
-
-VERSION=${1}
-RELEASE=portage-${VERSION}
-RELEASE_DIR=${RELEASE_BUILDDIR}/${RELEASE}
-RELEASE_TARBALL="${RELEASE_BUILDDIR}/${RELEASE}.tar.bz2"
-
-echo ">>> Cleaning working directory ${RELEASE_DIR}"
-rm -rf "${RELEASE_DIR}" || die "directory cleanup failed"
-mkdir -p "${RELEASE_DIR}" || die "directory creation failed"
-if [ ! -n "${NO_REMOTE}" ]; then
-	echo ">>> Cleaning working directory ${SOURCE_DIR}"
-	rm -rf "${SOURCE_DIR}" || die "directory cleanup failed"
-	mkdir -p "${SOURCE_DIR}" || die "directory creation failed"
-fi
-cd "${SOURCE_DIR}" || die "SOURCE_DIR doesn't exist?"
-
-if [ ! -n "${NO_REMOTE}" ]; then
-	echo ">>> Starting Git export"
-	git clone "${REPOSITORY}" . || die "git clone failed"
-	gitarchive_opts=""
-	[ -n "$CHANGELOG_REVISION" ] && ( git reset "$CHANGELOG_REVISION" || die "git reset failed" )
-fi
-
-echo ">>> Creating Changelog"
-gitlog_opts=""
-[ -n "$CHANGELOG_REVISION" ] && gitlog_opts+=" -r ${CHANGELOG_REVISION}..HEAD"
-git log $gitlog > "${SOURCE_DIR}/ChangeLog" || die "ChangeLog creation failed"
-
-echo ">>> Building release tree"
-cp -a "${SOURCE_DIR}/"{bin,cnf,doc,man,pym,src} "${RELEASE_DIR}/" || die "directory copy failed"
-cp "${SOURCE_DIR}/"{ChangeLog,DEVELOPING,NEWS,RELEASE-NOTES,TEST-NOTES} \
-	"${RELEASE_DIR}/" || die "file copy failed"
-
-cd "${RELEASE_BUILDDIR}"
-
-echo ">>> Creating release tarball ${RELEASE_TARBALL}"
-tar --owner portage --group portage -cjf "${RELEASE_TARBALL}" "${RELEASE}" || \
-	die "tarball creation failed"
-
-DISTDIR=$(portageq distdir)
-if [ -n "${DISTDIR}" -a -d "${DISTDIR}" -a -w "${DISTDIR}" ]; then
-	echo ">>> Copying release tarball into ${DISTDIR}"
-	cp "${RELEASE_TARBALL}" "${DISTDIR}"/ || echo "!!! tarball copy failed"
-fi
-
-if [ -n "${UPLOAD_LOCATION}" ]; then
-	echo ">>> Uploading ${RELEASE_TARBALL} to ${UPLOAD_LOCATION}"
-	scp "${RELEASE_TARBALL}" "dev.gentoo.org:${UPLOAD_LOCATION}" || die "upload failed"
-else
-	echo "${RELEASE_TARBALL} created"
-fi
-
-if [ -n "${CREATE_TAG}" ]; then
-	echo ">>> Tagging ${VERSION} in repository"
-	echo "Tagging not written yet."
-	echo "Please tag ${REPOSITORY}/tags/${VERSION} by hand" # TODO
-#	echo ">>> Tagging ${VERSION} in repository"
-#	svn cp ${SVN_LOCATION} ${REPOSITORY}/tags/${VERSION} || die "tagging failed"
-fi
-
-- 
1.6.4.4

From 5a8f5fde16affb3956ed4c56eb0295c5b7782a5f Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 20:13:32 -0400
Subject: [PATCH 21/52] Only execute hooks if they are desired in FEATURES

---
 pym/_emerge/main.py  |    3 +--
 pym/portage/hooks.py |    3 +++
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index 545ca28..6b14567 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1184,8 +1184,7 @@ def emerge_main():
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 
 	# Portage configured; let's let a hook set everything up before we do anything more
-	if "hooks" in settings['FEATURES']:
-		portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute()
+	portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute()
 
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 7a5e9fb..415041c 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -58,6 +58,9 @@ class HookFile (object):
 		self.settings = settings
 	
 	def execute (self):
+		if "hooks" not in settings['FEATURES']:
+			return
+
 		path = normalize_path(self.path)
 		
 		if not os.path.exists(path):
-- 
1.6.4.4

From 4871dc111b3d70fb5bb92e7a55df57207336d855 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 20:24:50 -0400
Subject: [PATCH 22/52] Normalize when the variable is passed so it's always normalized

---
 pym/portage/hooks.py |    4 +---
 1 files changed, 1 insertions(+), 3 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 415041c..7db24d7 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -54,14 +54,12 @@ class HookFile (object):
 		self.myaction = myaction
 		self.mytargets = mytargets
 		check_config_instance(settings)
-		self.path = path
+		self.path = normalize_path(path)
 		self.settings = settings
 	
 	def execute (self):
 		if "hooks" not in settings['FEATURES']:
 			return
-
-		path = normalize_path(self.path)
 		
 		if not os.path.exists(path):
 			raise InvalidLocation('This hook path could not be found: ' + path)
-- 
1.6.4.4

From 6dda2e189c2c3c08a251f8d7f7b6a2d0bce098cb Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 20:57:04 -0400
Subject: [PATCH 23/52] Added post-run hooks

---
 pym/_emerge/main.py |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index 6b14567..b90f212 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -29,6 +29,7 @@ import portage.elog
 import portage.dep
 portage.dep._dep_check_strict = True
 import portage.hooks
+import portage.process
 import portage.util
 import portage.locks
 import portage.exception
@@ -1184,6 +1185,7 @@ def emerge_main():
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 
 	# Portage configured; let's let a hook set everything up before we do anything more
+	portage.process.atexit_register(portage.hooks.HookDirectory(phase='post-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute)
 	portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute()
 
 	rval = profile_check(trees, myaction)
-- 
1.6.4.4

From 28f04de3f62bd2931a9bfb242e19c067f9becfa4 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 22:23:35 -0400
Subject: [PATCH 24/52] Typo fixes in HookFile

---
 pym/portage/hooks.py |   14 +++++++-------
 1 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 7db24d7..39de92a 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -58,14 +58,14 @@ class HookFile (object):
 		self.settings = settings
 	
 	def execute (self):
-		if "hooks" not in settings['FEATURES']:
+		if "hooks" not in self.settings['FEATURES']:
 			return
 		
-		if not os.path.exists(path):
-			raise InvalidLocation('This hook path could not be found: ' + path)
+		if not os.path.exists(self.path):
+			raise InvalidLocation('This hook path could not be found: ' + self.path)
 		
-		if os.path.isfile(path):
-			command=[path]
+		if os.path.isfile(self.path):
+			command=[self.path]
 			if self.myopts:
 				for myopt in self.myopts:
 					command.extend(['--opt', myopt])
@@ -78,10 +78,10 @@ class HookFile (object):
 			command=[BASH_BINARY, '-c', 'source ' + PORTAGE_BIN_PATH + '/isolated-functions.sh && source ' + ' '.join(command)]
 			code = spawn(mycommand=command, env=self.settings.environ())
 			if code: # if failure
-				raise PortageException('!!! Hook %s failed with exit code %s' % (path, code))
+				raise PortageException('!!! Hook %s failed with exit code %s' % (self.path, code))
 		
 		else:
-			raise InvalidLocation('This hook path ought to be a file: ' + path)
+			raise InvalidLocation('This hook path ought to be a file: ' + self.path)
 
 if __name__ == "__main__": # TODO: debug
 	from portage.package.ebuild.config import config
-- 
1.6.4.4

From ed27ba4e4677097fdb0757d93bd717829aee7ad7 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 22:34:18 -0400
Subject: [PATCH 25/52] Added pre- and post-sync hooks

---
 pym/_emerge/actions.py |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)

diff --git a/pym/_emerge/actions.py b/pym/_emerge/actions.py
index bf26881..9f45076 100644
--- a/pym/_emerge/actions.py
+++ b/pym/_emerge/actions.py
@@ -32,6 +32,7 @@ from portage.output import blue, bold, colorize, create_color_func, darkgreen, \
 	red, yellow
 good = create_color_func("GOOD")
 bad = create_color_func("BAD")
+from portage.hooks import HookDirectory
 from portage.sets import load_default_config, SETPREFIX
 from portage.sets.base import InternalPackageSet
 from portage.util import cmp_sort_key, writemsg, writemsg_level
@@ -1746,6 +1747,7 @@ def action_sync(settings, trees, mtimedb, myopts, myaction):
 	os.umask(0o022)
 	dosyncuri = syncuri
 	updatecache_flg = False
+	HookDirectory(phase='pre-sync', settings=settings, myopts=myopts, myaction=myaction).execute()
 	if myaction == "metadata":
 		print("skipping sync")
 		updatecache_flg = True
@@ -2189,6 +2191,8 @@ def action_sync(settings, trees, mtimedb, myopts, myaction):
 			if retval != os.EX_OK:
 				print(red(" * ") + bold("spawn failed of " + postsync))
 
+	HookDirectory(phase='post-sync', settings=settings, myopts=myopts, myaction=myaction).execute()
+
 	if(mybestpv != mypvs) and not "--quiet" in myopts:
 		print()
 		print(red(" * ")+bold("An update to portage is available.")+" It is _highly_ recommended")
-- 
1.6.4.4

From 80093ef545d62209174a49293612f187881070b0 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 23:02:57 -0400
Subject: [PATCH 26/52] Made testing more robust; now checks to see if the hook ran once

---
 pym/portage/tests/hooks/test_HookDirectory.py |   42 ++++++++++--------------
 1 files changed, 18 insertions(+), 24 deletions(-)

diff --git a/pym/portage/tests/hooks/test_HookDirectory.py b/pym/portage/tests/hooks/test_HookDirectory.py
index 2dbf17c..d19c47b 100644
--- a/pym/portage/tests/hooks/test_HookDirectory.py
+++ b/pym/portage/tests/hooks/test_HookDirectory.py
@@ -8,6 +8,14 @@ from portage.hooks import HookDirectory
 from portage.package.ebuild.config import config
 from portage.tests import TestCase
 from tempfile import mkdtemp
+from shutil import rmtree
+
+# http://stackoverflow.com/questions/845058/how-to-get-line-count-cheaply-in-python
+def file_len(fname):
+    with open(fname) as f:
+        for i, l in enumerate(f):
+            pass
+    return i + 1
 
 class HookDirectoryTestCase(TestCase):
 	
@@ -17,39 +25,25 @@ class HookDirectoryTestCase(TestCase):
 		Based on test_PackageKeywordsFile.py
 		"""
 
-		tmp_dirs = ['etc', 'portage', 'hooks', 'test.d']
-		tmp_dir_path = self.BuildTmp(tmp_dirs)
-		tmp_dirs = [tmp_dir_path, 'etc', 'portage', 'hooks', 'test.d']
+		tmp_dir_path = self.BuildTmp('/etc/portage/hooks/test.d')
 		try:
 			settings = config()
 			settings["PORTAGE_CONFIGROOT"] = tmp_dir_path
+			settings["FEATURES"] += " hooks"
 			hooks = HookDirectory('test', settings)
 			hooks.execute()
+			self.assert_(file_len(tmp_dir_path+'/output') == 1)
 		finally:
-			self.NukeTmp(tmp_dirs)
+			rmtree(tmp_dir_path)
 	
-	def BuildTmp(self, tmp_subdirs):
-		tmp_dir_path = mkdtemp()
-		hooks_dir = tmp_dir_path
-		for tmp_subdir in tmp_subdirs:
-			hooks_dir = hooks_dir + '/' + tmp_subdir
-			os.mkdir(hooks_dir)
+	def BuildTmp(self, tmp_subdir):
+		tmp_dir = mkdtemp()
+		hooks_dir = tmp_dir + '/' + tmp_subdir
+		os.makedirs(hooks_dir)
 		
 		f = open(hooks_dir+'/testhook', 'w')
 		f.write('#!/bin/bash\n')
-		f.write('exit 0\n')
+		f.write('echo hi > '+tmp_dir+'/output && exit 0\n')
 		f.close()
 		
-		return tmp_dir_path
-
-	def NukeTmp(self, tmp_dirs):
-		tmp_dir_paths = []
-		curr_path = ''
-		for tmp_dir in tmp_dirs:
-			curr_path = curr_path + '/' + tmp_dir
-			tmp_dir_paths.append(curr_path)
-		
-		tmp_dir_paths.reverse()
-		os.unlink(curr_path+'/testhook')
-		for tmp_dir_path in tmp_dir_paths:
-			os.rmdir(tmp_dir_path)
+		return tmp_dir
-- 
1.6.4.4

From 53c04708cfd71ccf50ffb0ba46032ed2b03ebd76 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 23:21:03 -0400
Subject: [PATCH 27/52] Hooks obeys --verbose now

---
 pym/portage/hooks.py |    9 +++++++--
 1 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 39de92a..dedfb97 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -34,13 +34,15 @@ class HookDirectory(object):
 		path = normalize_path(path)
 		
 		if not os.path.exists(path):
-			self.output.ewarn('This hook path could not be found: ' + path)
+			if self.myopts and "--verbose" in self.myopts:
+				self.output.ewarn('This hook path could not be found: ' + path)
 			return
 		
 		if os.path.isdir(path):
 			for parent, dirs, files in os.walk(path):
 				for dir in dirs:
-					self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
+					if self.myopts and "--verbose" in self.myopts:
+						self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
 				for filename in files:
 					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.mytargets).execute()
 		
@@ -56,6 +58,7 @@ class HookFile (object):
 		check_config_instance(settings)
 		self.path = normalize_path(path)
 		self.settings = settings
+		self.output = EOutput()
 	
 	def execute (self):
 		if "hooks" not in self.settings['FEATURES']:
@@ -76,6 +79,8 @@ class HookFile (object):
 					command.extend(['--target', mytarget])
 			
 			command=[BASH_BINARY, '-c', 'source ' + PORTAGE_BIN_PATH + '/isolated-functions.sh && source ' + ' '.join(command)]
+			if self.myopts and "--verbose" in self.myopts:
+				self.output.einfo('Executing hook "' + self.path + '"...')
 			code = spawn(mycommand=command, env=self.settings.environ())
 			if code: # if failure
 				raise PortageException('!!! Hook %s failed with exit code %s' % (self.path, code))
-- 
1.6.4.4

From aa67666df24be41250c304fa77950684fda5f4c3 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 27 May 2010 23:46:01 -0400
Subject: [PATCH 28/52] Removed post-ebuild hooks for now, since they run too early

---
 pym/portage/package/ebuild/doebuild.py |   33 --------------------------------
 1 files changed, 0 insertions(+), 33 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 006c7bc..7e0b43a 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -539,7 +539,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " clean",
 				mysettings, debug=debug, fd_pipes=fd_pipes, free=1,
 				logfile=None, returnpid=returnpid)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		restrict = set(mysettings.get('PORTAGE_RESTRICT', '').split())
@@ -551,7 +550,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				mypids = spawn(_shell_quote(ebuild_sh_binary) + " depend",
 					mysettings, fd_pipes=fd_pipes, returnpid=True,
 					droppriv=droppriv)
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return mypids
 			elif isinstance(dbkey, dict):
 				mysettings["dbkey"] = ""
@@ -584,7 +582,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					# Don't trust bash's returncode if the
 					# number of lines is incorrect.
 					retval = 1
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 			elif dbkey:
 				mysettings["dbkey"] = dbkey
@@ -595,7 +592,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " depend",
 				mysettings,
 				droppriv=droppriv)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		# Validate dependency metadata here to ensure that ebuilds with invalid
@@ -605,7 +601,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if not returnpid:
 			rval = _validate_deps(mysettings, myroot, mydo, mydbapi)
 			if rval != os.EX_OK:
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return rval
 
 		if "PORTAGE_TMPDIR" not in mysettings or \
@@ -614,7 +609,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				"PORTAGE_TMPDIR variable, '%s',\n"
 				"does not exist.  Please create this directory or "
 				"correct your PORTAGE_TMPDIR setting.\n") % mysettings.get("PORTAGE_TMPDIR", ""), noiselevel=-1)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 		
 		# as some people use a separate PORTAGE_TMPDIR mount
@@ -629,7 +623,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			writemsg(_("%s is not writable.\n"
 				"Likely cause is that you've mounted it as readonly.\n") % checkdir,
 				noiselevel=-1)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 		else:
 			fd = tempfile.NamedTemporaryFile(prefix="exectest-", dir=checkdir)
@@ -641,7 +634,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					"Please make sure that portage can execute files in this directory.\n") % checkdir,
 					noiselevel=-1)
 				fd.close()
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			fd.close()
 		del checkdir
@@ -649,7 +641,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if mydo == "unmerge":
 			retval = unmerge(mysettings["CATEGORY"],
 				mysettings["PF"], myroot, mysettings, vartree=vartree)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		# Build directory creation isn't required for any of these.
@@ -662,7 +653,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			not (mydo == 'fetch' and 'fetch' not in restrict):
 			mystatus = prepare_build_dirs(myroot, mysettings, cleanup)
 			if mystatus:
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return mystatus
 			have_build_dirs = True
 
@@ -731,7 +721,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					for line in wrap(msg, 70):
 						eerror(line, phase="setup", key=mysettings.mycpv)
 					elog_process(mysettings.mycpv, mysettings)
-					HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 					return 1
 			del env_file, env_stat, saved_env
 			_doebuild_exit_status_unlink(
@@ -744,7 +733,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if mydo == "help":
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " " + mydo,
 				mysettings, debug=debug, free=1, logfile=logfile)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 		elif mydo == "setup":
 			retval = spawn(
@@ -752,7 +740,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				debug=debug, free=1, logfile=logfile, fd_pipes=fd_pipes,
 				returnpid=returnpid)
 			if returnpid:
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 			retval = exit_status_check(retval)
 			if secpass >= 2:
@@ -761,7 +748,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				apply_recursive_permissions(mysettings["T"],
 					uid=portage_uid, gid=portage_gid, dirmode=0o70, dirmask=0,
 					filemode=0o60, filemask=0)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 		elif mydo == "preinst":
 			phase_retval = spawn(
@@ -770,7 +756,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return phase_retval
 
 			phase_retval = exit_status_check(phase_retval)
@@ -785,7 +770,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				if phase_retval != os.EX_OK:
 					writemsg(_("!!! post preinst failed; exiting.\n"),
 						noiselevel=-1)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return phase_retval
 		elif mydo == "postinst":
 			phase_retval = spawn(
@@ -794,7 +778,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return phase_retval
 
 			phase_retval = exit_status_check(phase_retval)
@@ -808,7 +791,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				if phase_retval != os.EX_OK:
 					writemsg(_("!!! post postinst failed; exiting.\n"),
 						noiselevel=-1)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return phase_retval
 		elif mydo in ("prerm", "postrm", "config", "info"):
 			retval =  spawn(
@@ -817,11 +799,9 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				fd_pipes=fd_pipes, returnpid=returnpid)
 
 			if returnpid:
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return retval
 
 			retval = exit_status_check(retval)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return retval
 
 		mycpv = "/".join((mysettings["CATEGORY"], mysettings["PF"]))
@@ -851,7 +831,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				writemsg(_("!!! Invalid SRC_URI for '%s'.\n") % mycpv,
 					noiselevel=-1)
 				del e
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			mysettings.configdict["pkg"]["A"] = " ".join(alist)
 			mysettings.configdict["pkg"]["AA"] = " ".join(aalist)
@@ -863,7 +842,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					fetchme = alist
 				if not fetch(fetchme, mysettings, listonly=listonly,
 					fetchonly=fetchonly):
-					HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 					return 1
 
 		else:
@@ -878,17 +856,14 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			checkme = alist
 
 		if mydo == "fetch" and listonly:
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 0
 
 		try:
 			if mydo == "manifest":
 				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return not retval
 			elif mydo == "digest":
 				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return not retval
 			elif mydo != 'fetch' and not emerge_skip_digest and \
 				"digest" in mysettings.features:
@@ -899,17 +874,14 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		except PermissionDenied as e:
 			writemsg(_("!!! Permission Denied: %s\n") % (e,), noiselevel=-1)
 			if mydo in ("digest", "manifest"):
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 
 		# See above comment about fetching only when needed
 		if not emerge_skip_distfiles and \
 			not digestcheck(checkme, mysettings, "strict" in features):
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
 		if mydo == "fetch":
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 0
 
 		# remove PORTAGE_ACTUAL_DISTDIR once cvs/svn is supported via SRC_URI
@@ -1013,7 +985,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				os.path.join(mysettings["PORTAGE_BUILDDIR"], ".installed")):
 				writemsg(_("!!! mydo=qmerge, but the install phase has not been run\n"),
 					noiselevel=-1)
-				HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 				return 1
 			# qmerge is a special phase that implies noclean.
 			if "noclean" not in mysettings.features:
@@ -1042,10 +1013,8 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 					vartree=vartree, prev_mtimes=prev_mtimes)
 		else:
 			writemsg_stdout(_("!!! Unknown mydo: %s\n") % mydo, noiselevel=-1)
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
-		HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 		return retval
 
 	finally:
@@ -1117,10 +1086,8 @@ def _validate_deps(mysettings, myroot, mydo, mydbapi):
 			portage.util.writemsg_level(x,
 				level=logging.ERROR, noiselevel=-1)
 		if mydo not in invalid_dep_exempt_phases:
-			HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 			return 1
 
-	HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 	return os.EX_OK
 
 # XXX This would be to replace getstatusoutput completely.
-- 
1.6.4.4

From 68adcd85a876912ceafb1c0bb9bc5648c8b6d6a6 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Fri, 28 May 2010 01:02:31 -0400
Subject: [PATCH 29/52] Dropped extra hooks warnings to --debug, not --verbose

---
 pym/portage/hooks.py |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index dedfb97..6dd55e6 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -34,15 +34,15 @@ class HookDirectory(object):
 		path = normalize_path(path)
 		
 		if not os.path.exists(path):
-			if self.myopts and "--verbose" in self.myopts:
-				self.output.ewarn('This hook path could not be found: ' + path)
+			if self.myopts and "--debug" in self.myopts:
+				self.output.ewarn('This hook path could not be found; ignored: ' + path)
 			return
 		
 		if os.path.isdir(path):
 			for parent, dirs, files in os.walk(path):
 				for dir in dirs:
-					if self.myopts and "--verbose" in self.myopts:
-						self.output.ewarn('Directory within hook directory not allowed: ' + path+'/'+dir)
+					if self.myopts and "--debug" in self.myopts:
+						self.output.ewarn('Directory within hook directory not allowed; ignored: ' + path+'/'+dir)
 				for filename in files:
 					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.mytargets).execute()
 		
-- 
1.6.4.4

From 5b91b0c54c54cf77d4cab1c033885a0b9d423ea4 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Fri, 28 May 2010 01:03:10 -0400
Subject: [PATCH 30/52] Hooks documentation more or less written

---
 doc/config.docbook       |    1 +
 doc/config/hooks.docbook |   78 ++++++++++++++++++++++++++++++++++++++++++++++
 doc/portage.docbook      |    1 +
 man/portage.5            |   30 +++++++++++++++++
 4 files changed, 110 insertions(+), 0 deletions(-)
 create mode 100644 doc/config/hooks.docbook

diff --git a/doc/config.docbook b/doc/config.docbook
index 88009df..c2bd0ed 100644
--- a/doc/config.docbook
+++ b/doc/config.docbook
@@ -2,4 +2,5 @@
 <title>Configuration</title>
 &config_bashrc;
 &config_set;
+&config_hooks;
 </part>
diff --git a/doc/config/hooks.docbook b/doc/config/hooks.docbook
new file mode 100644
index 0000000..c382815
--- /dev/null
+++ b/doc/config/hooks.docbook
@@ -0,0 +1,78 @@
+<chapter id='config-hooks'>
+	<title>Hooks Configuration</title>
+	<sect1 id='config-hooks-locations'>
+		<title>Hooks Locations</title>
+		<para>
+		If a hook directory exists, they will either be executed before
+		or after that particular stage. The hooks inside each directory
+		will be executed by bash. Each one will receive the environment
+		of an ebuild, so they are capable of inherit, einfo, and other
+		common commands (if you find them useful). Avoid commands that
+		may trigger changes in the filesystem!
+		</para>
+		
+		<para>
+		A hook is presently not allowed to alter portage's execution,
+		but they can supplement it with additional functionality. Since
+		hooks execute in a bash environment, they are told the parent
+		process ID, which can be used to kill the parent (nicely,
+		please) if absolutely needed. This might be useful in a pre-sync
+		script.
+		</para>
+		
+		<para>
+		When a hook is called, any of the following arguments are
+		passed:
+		<cmdsynopsis>
+			<command>/bin/bash <replaceable>...</replaceable></command><sbr/>
+
+			<arg>--opt <replaceable>portage arguments, always translated to long form, given by user at the prompt, such as "--verbose" or "--newuse"</replaceable></arg><sbr/>
+
+			<arg>--action <replaceable>a single action being performed by portage, such as "depclean", "sync", or an ebuild phase</replaceable></arg><sbr/>
+
+			<arg>--target <replaceable>the thing to perform the action with or on</replaceable></arg>
+		</cmdsynopsis>
+		</para>
+		
+		<para>
+		As of this writing, the following hook directories are
+		supported. It can be assumed that the above arguments apply
+		except wherever described differently.
+		</para>
+		
+		<itemizedlist>
+			<listitem><para><filename>/etc/portage/hooks/pre-ebuild.d/</filename> - executed before every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - yet to be implemented</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/pre-run.d/</filename> - executed before portage considers most things, including proper permissions and validity of arguments.</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/post-run.d/</filename> - executed after portage is done. It should run regardless of any errors or signals sent, but this cannot be guaranteed for certain scenarios (such as when the KILL signal is received). No information is available concerning the reason portage is exiting. This is a limitation of python itself.</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/pre-sync.d/</filename> - executed before portage synchronizes the portage tree.</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/post-sync.d/</filename> - executed after portage has successfully synchronized the portage tree. Presently you must use a combination of pre-sync and post-run to catch sync failures if desired.</para></listitem>
+		</itemizedlist>
+	</sect1>
+	<sect1 id='config-hooks-skeleton-hook'>
+		<title>Skeleton Hook</title>
+		<para>
+		Most hooks will parse the options at the beginning and look for
+		specific things. This skeleton hook provides that functionality
+		to get you started. Replace the colons with actual code where
+		desired.
+		</para>
+		<programlisting>
+		#!/bin/bash
+
+		einfo "This is an example hook."
+		while [[ "$1" != "" ]]; do
+			if [[ "$1" == "--opt" ]]; then
+				:
+			elif [[ "$1" == "--action" ]]; then
+				:
+			elif [[ "$1" == "--target" ]]; then
+				:
+			else
+				ewarn "Unknown hook option: $1 $2"
+			fi
+			shift 2
+		done
+		</programlisting>
+	</sect1>
+</chapter>
diff --git a/doc/portage.docbook b/doc/portage.docbook
index 999103a..c754352 100644
--- a/doc/portage.docbook
+++ b/doc/portage.docbook
@@ -23,6 +23,7 @@
 	<!ENTITY config SYSTEM "config.docbook">
 	<!ENTITY config_bashrc SYSTEM "config/bashrc.docbook">
 	<!ENTITY config_set SYSTEM "config/sets.docbook">
+	<!ENTITY config_hooks SYSTEM "config/hooks.docbook">
 ]>
 
 <book id="portage" lang="en">
diff --git a/man/portage.5 b/man/portage.5
index 40bf89f..180c7d3 100644
--- a/man/portage.5
+++ b/man/portage.5
@@ -59,6 +59,12 @@ package.use
 repos.conf
 .fi
 .TP
+.BR /etc/portage/env/
+package-specific bashrc files
+.TP
+.BR /etc/portage/hooks/
+portage pre/post hooks
+.TP
 .BR /etc/portage/profile/
 site-specific overrides of \fB/etc/make.profile/\fR
 .TP
@@ -616,6 +622,30 @@ masters = gentoo kde
 .fi
 .RE
 .TP
+.BR /etc/portage/env/
+.RS
+In this directory additional package-specific bashrc files can be created.
+Portage will source all of them after \fB/etc/portage/bashrc\fR in the following
+order:
+.nr step 1 1
+.IP \n[step]. 3
+/etc/portage/env/${CATEGORY}/${PN}
+.IP \n+[step].
+/etc/portage/env/${CATEGORY}/${PN}:${SLOT}
+.IP \n+[step].
+/etc/portage/env/${CATEGORY}/${P}
+.IP \n+[step].
+/etc/portage/env/${CATEGORY}/${PF}
+.RE
+.TP
+.BR /etc/portage/hooks/
+.RS
+In this directory, portage hooks are executed before each ebuild phase,
+before and after synchronization, and before and after portage runs
+themselves. Please see the DocBook documentation for detailed
+information.
+.RE
+.TP
 .BR /usr/portage/metadata/
 .RS
 .TP
-- 
1.6.4.4

From 70a675792a91a1bebe3707ad268dcaff0fa6e137 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Wed, 2 Jun 2010 16:31:43 -0400
Subject: [PATCH 31/52] Minor fixes to hooks commenting in main.py

---
 pym/_emerge/main.py |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index b90f212..06c1d57 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1184,8 +1184,9 @@ def emerge_main():
 	settings, trees, mtimedb = load_emerge_config()
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 
-	# Portage configured; let's let a hook set everything up before we do anything more
+	# Have post-run hooks executed whenever portage quits
 	portage.process.atexit_register(portage.hooks.HookDirectory(phase='post-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute)
+	# Portage configured; let's let hooks run before we do anything more
 	portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute()
 
 	rval = profile_check(trees, myaction)
-- 
1.6.4.4

From 93500d1523d7e0a8998bd2c2b2cd3bd5e7e3746e Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Wed, 2 Jun 2010 16:32:46 -0400
Subject: [PATCH 32/52] Removed debug code from hooks.py

---
 pym/portage/hooks.py |    9 ---------
 1 files changed, 0 insertions(+), 9 deletions(-)

diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 6dd55e6..ec4436d 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -2,11 +2,6 @@
 # Distributed under the terms of the GNU General Public License v2
 # $Id$
 
-# TODO: following may be harmful, but helpful for debugging
-#import os, sys
-#import os.path as osp
-#sys.path.insert(0, osp.dirname(osp.dirname(osp.abspath(__file__))))
-
 from portage.const import BASH_BINARY, HOOKS_PATH, PORTAGE_BIN_PATH
 from portage import os
 from portage import check_config_instance
@@ -87,7 +82,3 @@ class HookFile (object):
 		
 		else:
 			raise InvalidLocation('This hook path ought to be a file: ' + self.path)
-
-if __name__ == "__main__": # TODO: debug
-	from portage.package.ebuild.config import config
-	HookDirectory('run', config()).execute()
-- 
1.6.4.4

From d0cbe7afade1b3cbf0c389d0bb30c42c869901a2 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Wed, 2 Jun 2010 16:33:11 -0400
Subject: [PATCH 33/52] Reverted remaining old post-ebuild implementation, and added new, improved post-ebuild code

---
 pym/portage/package/ebuild/doebuild.py |   17 +++++++----------
 1 files changed, 7 insertions(+), 10 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 7e0b43a..72d3716 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -589,10 +589,9 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 				mysettings["dbkey"] = \
 					os.path.join(mysettings.depcachedir, "aux_db_key_temp")
 
-			retval = spawn(_shell_quote(ebuild_sh_binary) + " depend",
+			return spawn(_shell_quote(ebuild_sh_binary) + " depend",
 				mysettings,
 				droppriv=droppriv)
-			return retval
 
 		# Validate dependency metadata here to ensure that ebuilds with invalid
 		# data are never installed via the ebuild command. Don't bother when
@@ -639,9 +638,8 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		del checkdir
 
 		if mydo == "unmerge":
-			retval = unmerge(mysettings["CATEGORY"],
+			return unmerge(mysettings["CATEGORY"],
 				mysettings["PF"], myroot, mysettings, vartree=vartree)
-			return retval
 
 		# Build directory creation isn't required for any of these.
 		# In the fetch phase, the directory is needed only for RESTRICT=fetch
@@ -731,9 +729,8 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		# if any of these are being called, handle them -- running them out of
 		# the sandbox -- and stop now.
 		if mydo == "help":
-			retval = spawn(_shell_quote(ebuild_sh_binary) + " " + mydo,
+			return spawn(_shell_quote(ebuild_sh_binary) + " " + mydo,
 				mysettings, debug=debug, free=1, logfile=logfile)
-			return retval
 		elif mydo == "setup":
 			retval = spawn(
 				_shell_quote(ebuild_sh_binary) + " " + mydo, mysettings,
@@ -860,11 +857,9 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 
 		try:
 			if mydo == "manifest":
-				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
-				return not retval
+				return not digestgen(mysettings=mysettings, myportdb=mydbapi)
 			elif mydo == "digest":
-				retval = digestgen(mysettings=mysettings, myportdb=mydbapi)
-				return not retval
+				return not digestgen(mysettings=mysettings, myportdb=mydbapi)
 			elif mydo != 'fetch' and not emerge_skip_digest and \
 				"digest" in mysettings.features:
 				# Don't do this when called by emerge or when called just
@@ -1041,6 +1036,8 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			# If necessary, depend phase has been triggered by aux_get calls
 			# and the exemption is no longer needed.
 			portage._doebuild_manifest_exempt_depend -= 1
+		
+		HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
 
 def _validate_deps(mysettings, myroot, mydo, mydbapi):
 
-- 
1.6.4.4

From 5393676da14d977da3167eb439f9addeac21a09b Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Wed, 2 Jun 2010 16:33:36 -0400
Subject: [PATCH 34/52] Updated manual to reflect new post-ebuild functionality, and to be clearer

---
 doc/config/hooks.docbook |   61 ++++++++++++++++++++++++++++++----------------
 1 files changed, 40 insertions(+), 21 deletions(-)

diff --git a/doc/config/hooks.docbook b/doc/config/hooks.docbook
index c382815..ca62f5f 100644
--- a/doc/config/hooks.docbook
+++ b/doc/config/hooks.docbook
@@ -3,26 +3,28 @@
 	<sect1 id='config-hooks-locations'>
 		<title>Hooks Locations</title>
 		<para>
-		If a hook directory exists, they will either be executed before
-		or after that particular stage. The hooks inside each directory
-		will be executed by bash. Each one will receive the environment
-		of an ebuild, so they are capable of inherit, einfo, and other
-		common commands (if you find them useful). Avoid commands that
-		may trigger changes in the filesystem!
+		If a hook directory exists, the bash scripts within each one
+		wil either be executed before or after that particular stage, in
+		alphabetical order. Each one will receive the environment of an
+		ebuild, so they are capable of inherit, einfo, and other common
+		commands (if you find them useful). Avoid commands that may
+		trigger changes in the filesystem!
 		</para>
 		
 		<para>
-		A hook is presently not allowed to alter portage's execution,
-		but they can supplement it with additional functionality. Since
-		hooks execute in a bash environment, they are told the parent
-		process ID, which can be used to kill the parent (nicely,
-		please) if absolutely needed. This might be useful in a pre-sync
-		script.
+		All hooks are not allowed to directly alter portage's execution,
+		but they can accomplish certain extra tasks at various points,
+		which might indrectly alter portage's execution. Since hooks
+		execute in a bash environment, they are told the parent process
+		ID, which can be used to kill portage if absolutely needed. This
+		might be useful if a hook handled the rest of a certain job,
+		such as syncing, and portage's default behavior is undesired, or
+		if a hook caught potential problems with the rest of portage's
+		execution.
 		</para>
 		
 		<para>
-		When a hook is called, any of the following arguments are
-		passed:
+		A hook script is expected to understand the following usage:
 		<cmdsynopsis>
 			<command>/bin/bash <replaceable>...</replaceable></command><sbr/>
 
@@ -35,14 +37,13 @@
 		</para>
 		
 		<para>
-		As of this writing, the following hook directories are
-		supported. It can be assumed that the above arguments apply
-		except wherever described differently.
+		The following hook directories are supported. The standard hook
+		script usage applies, except wherever described differently.
 		</para>
 		
 		<itemizedlist>
 			<listitem><para><filename>/etc/portage/hooks/pre-ebuild.d/</filename> - executed before every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
-			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - yet to be implemented</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - executed after every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
 			<listitem><para><filename>/etc/portage/hooks/pre-run.d/</filename> - executed before portage considers most things, including proper permissions and validity of arguments.</para></listitem>
 			<listitem><para><filename>/etc/portage/hooks/post-run.d/</filename> - executed after portage is done. It should run regardless of any errors or signals sent, but this cannot be guaranteed for certain scenarios (such as when the KILL signal is received). No information is available concerning the reason portage is exiting. This is a limitation of python itself.</para></listitem>
 			<listitem><para><filename>/etc/portage/hooks/pre-sync.d/</filename> - executed before portage synchronizes the portage tree.</para></listitem>
@@ -57,22 +58,40 @@
 		to get you started. Replace the colons with actual code where
 		desired.
 		</para>
+		<para>
+		It's highly recommended that --verbose, --debug, and --quiet be
+		utilized for suppressing or adding to "regular" output. The
+		following skeleton hook already has example code in place to
+		handle these flags.
+		</para>
 		<programlisting>
 		#!/bin/bash
 
-		einfo "This is an example hook."
+		verbose_redirect="/dev/null"
+		debug_redirect="/dev/null"
 		while [[ "$1" != "" ]]; do
 			if [[ "$1" == "--opt" ]]; then
-				:
+				if [[ "$2" == "--verbose" ]]; then
+					verbose_redirect="/dev/tty"
+				fi
+				if [[ "$2" == "--debug" ]]; then
+					debug_redirect="/dev/tty"
+				fi
+				if [[ "$2" == "--quiet" ]]; then
+					verbose_redirect="/dev/null"
+					debug_redirect="/dev/null"
+				fi
 			elif [[ "$1" == "--action" ]]; then
 				:
 			elif [[ "$1" == "--target" ]]; then
 				:
 			else
-				ewarn "Unknown hook option: $1 $2"
+				ewarn "Unknown hook option: $1 $2" > "${verbose_redirect}" 2>&1
 			fi
 			shift 2
 		done
+		einfo "This is an example hook." > "${verbose_redirect}" 2>&1
+		einfo "This is debug output." > "${debug_redirect}" 2>&1
 		</programlisting>
 	</sect1>
 </chapter>
-- 
1.6.4.4

From 7119595be57fbf1d1a38cc8c4f8e217620b2f172 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Thu, 3 Jun 2010 11:48:27 -0400
Subject: [PATCH 35/52] Portage settings can change after a pre-run script, so be sure to reload them before doing anything more

---
 pym/_emerge/main.py |    7 +++++--
 1 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/pym/_emerge/main.py b/pym/_emerge/main.py
index 06c1d57..1f72a57 100644
--- a/pym/_emerge/main.py
+++ b/pym/_emerge/main.py
@@ -1182,12 +1182,15 @@ def emerge_main():
 	# Portage needs to ensure a sane umask for the files it creates.
 	os.umask(0o22)
 	settings, trees, mtimedb = load_emerge_config()
+
+	# Portage configured; let's let hooks run before we do anything more
+	portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute()
+
+	settings, trees, mtimedb = load_emerge_config() # once more, since pre-run might've done something
 	portdb = trees[settings["ROOT"]]["porttree"].dbapi
 
 	# Have post-run hooks executed whenever portage quits
 	portage.process.atexit_register(portage.hooks.HookDirectory(phase='post-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute)
-	# Portage configured; let's let hooks run before we do anything more
-	portage.hooks.HookDirectory(phase='pre-run', settings=settings, myopts=myopts, myaction=myaction, mytargets=myfiles).execute()
 
 	rval = profile_check(trees, myaction)
 	if rval != os.EX_OK:
-- 
1.6.4.4

From f03be476f8e4e0be33802b957676177f353d63a4 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Sat, 5 Jun 2010 13:49:49 -0400
Subject: [PATCH 36/52] Hooks can now write back to settings

---
 bin/hooks.sh                                  |   49 +++++++++++++++++
 pym/portage/const.py                          |    1 +
 pym/portage/hooks.py                          |   72 ++++++++++++-------------
 pym/portage/tests/hooks/test_HookDirectory.py |    4 +-
 4 files changed, 87 insertions(+), 39 deletions(-)
 create mode 100755 bin/hooks.sh

diff --git a/bin/hooks.sh b/bin/hooks.sh
new file mode 100755
index 0000000..859c6a1
--- /dev/null
+++ b/bin/hooks.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+# Copyright 1999-2010 Gentoo Foundation
+# Distributed under the terms of the GNU General Public License v2
+
+function hooksave () {
+	local unsecure_varname="$1"
+	local varname="$(basename ${unsecure_varname})"
+	
+	if [[ "${unsecure_varname}" != "${varname}" ]]; then
+		eerror "Illegal hooks variable name: ${unsecure_varname}"
+		return 1
+	fi
+	
+	# hack: removes the beginning 'declare ... var=[quote]' and ending quote. Suggestions welcome.
+	declare -p "${varname}" | sed '1s|^[^=]*=['"'"'"]||; $s|['"'"'"]$||' > "${hooks_tmpdir}/${varname}" || return $?
+}
+
+# local variables listed here
+hook_files=( * )
+hook_args=( "$@" )
+hook_verbosity="0"
+local_vars=( "hook_files" "hook_args" "hook_verbosity" )
+
+for (( i = 0 ; i < ${#hook_args[@]} ; i++ )); do
+	if [[ "${hook_args[$i]}" == "--verbose" ]]; then
+		hook_verbosity="1"
+	fi
+done
+
+for (( i = 0 ; i < ${#hook_files[@]} ; i++ )); do
+	hook="${hook_files[$i]}"
+	
+	if [[ ! -f "${hook}" ]]; then
+		[ "${hook_verbosity}" -gt 0 ] && ewarn "Only files are recognized in a hook directory: ${hook}"
+		continue
+	fi
+	
+	[ "${hook_verbosity}" -gt 0 ] && einfo "Executing hook ${hook}..."
+	# We use eval so the hook_args gets expanded before it is unset
+	( eval unset "${local_vars[@]}" '&&' source "${hook}" "${hook_args[@]}" )
+	
+	exit_code="$?"
+	if [[ "${exit_code}" != "0" ]]; then
+		eerror "Hook returned with exit code ${exit_code}"
+		exit "${exit_code}"
+	fi
+done
+
+unset "${local_vars[@]}"
diff --git a/pym/portage/const.py b/pym/portage/const.py
index 33fffd1..dbe2a00 100644
--- a/pym/portage/const.py
+++ b/pym/portage/const.py
@@ -61,6 +61,7 @@ PORTAGE_PYM_PATH         = PORTAGE_BASE_PATH + "/pym"
 LOCALE_DATA_PATH         = PORTAGE_BASE_PATH + "/locale"  # FIXME: not used
 EBUILD_SH_BINARY         = PORTAGE_BIN_PATH + "/ebuild.sh"
 MISC_SH_BINARY           = PORTAGE_BIN_PATH + "/misc-functions.sh"
+HOOKS_SH_BINARY          = PORTAGE_BIN_PATH + "/hooks.sh"
 SANDBOX_BINARY           = "/usr/bin/sandbox"
 FAKEROOT_BINARY          = "/usr/bin/fakeroot"
 BASH_BINARY              = "/bin/bash"
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index ec4436d..2570067 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -2,7 +2,7 @@
 # Distributed under the terms of the GNU General Public License v2
 # $Id$
 
-from portage.const import BASH_BINARY, HOOKS_PATH, PORTAGE_BIN_PATH
+from portage.const import BASH_BINARY, HOOKS_PATH, HOOKS_SH_BINARY, PORTAGE_BIN_PATH
 from portage import os
 from portage import check_config_instance
 from portage import normalize_path
@@ -10,6 +10,8 @@ from portage.exception import PortageException
 from portage.exception import InvalidLocation
 from portage.output import EOutput
 from process import spawn
+from shutil import rmtree
+from tempfile import mkdtemp
 
 class HookDirectory(object):
 
@@ -34,36 +36,7 @@ class HookDirectory(object):
 			return
 		
 		if os.path.isdir(path):
-			for parent, dirs, files in os.walk(path):
-				for dir in dirs:
-					if self.myopts and "--debug" in self.myopts:
-						self.output.ewarn('Directory within hook directory not allowed; ignored: ' + path+'/'+dir)
-				for filename in files:
-					HookFile(os.path.join(path, filename), self.settings, self.myopts, self.myaction, self.mytargets).execute()
-		
-		else:
-			raise InvalidLocation('This hook path ought to be a directory: ' + path)
-
-class HookFile (object):
-	
-	def __init__ (self, path, settings, myopts=None, myaction=None, mytargets=None):
-		self.myopts = myopts
-		self.myaction = myaction
-		self.mytargets = mytargets
-		check_config_instance(settings)
-		self.path = normalize_path(path)
-		self.settings = settings
-		self.output = EOutput()
-	
-	def execute (self):
-		if "hooks" not in self.settings['FEATURES']:
-			return
-		
-		if not os.path.exists(self.path):
-			raise InvalidLocation('This hook path could not be found: ' + self.path)
-		
-		if os.path.isfile(self.path):
-			command=[self.path]
+			command=[HOOKS_SH_BINARY]
 			if self.myopts:
 				for myopt in self.myopts:
 					command.extend(['--opt', myopt])
@@ -73,12 +46,35 @@ class HookFile (object):
 				for mytarget in self.mytargets:
 					command.extend(['--target', mytarget])
 			
-			command=[BASH_BINARY, '-c', 'source ' + PORTAGE_BIN_PATH + '/isolated-functions.sh && source ' + ' '.join(command)]
-			if self.myopts and "--verbose" in self.myopts:
-				self.output.einfo('Executing hook "' + self.path + '"...')
-			code = spawn(mycommand=command, env=self.settings.environ())
-			if code: # if failure
-				raise PortageException('!!! Hook %s failed with exit code %s' % (self.path, code))
+			tmpdir = mkdtemp()
+			try:
+				command=[BASH_BINARY, '-c', 'cd "'+path+'" && source "' + PORTAGE_BIN_PATH + '/isolated-functions.sh" && declare -xr hooks_tmpdir="'+tmpdir+'" && source ' + ' '.join(command)]
+				if self.myopts and "--verbose" in self.myopts:
+					self.output.einfo('Executing hook "' + self.path + '"...')
+				code = spawn(mycommand=command, env=self.settings.environ())
+				if code: # if failure
+					raise PortageException('!!! Hook %s failed with exit code %s' % (self.path, code))
+					
+				self.settings = self.merge_to_env (self.settings, tmpdir)
+				
+			finally:
+				rmtree(tmpdir)
 		
 		else:
-			raise InvalidLocation('This hook path ought to be a file: ' + self.path)
+			raise InvalidLocation('This hook path ought to be a directory: ' + path)
+	
+	def merge_to_env (self, existingenv, path):
+		path = normalize_path(path)
+
+		if not os.path.isdir(path):
+			raise InvalidLocation('This environment path is not a directory: ' + path)
+		
+		for parent, dirs, files in os.walk(path):
+			for varname in files:
+				file = open(os.path.join(path, varname), 'r')
+				# read the file, remove the very last newline, and make the escaped double-quotes just plain double-quotes (since only bash needs them to be escaped, not python)
+				vardata = file.read()[:-1].replace('\"','"')
+				existingenv[varname] = vardata
+				existingenv.backup_changes(varname)
+		
+		return existingenv
diff --git a/pym/portage/tests/hooks/test_HookDirectory.py b/pym/portage/tests/hooks/test_HookDirectory.py
index d19c47b..3527e67 100644
--- a/pym/portage/tests/hooks/test_HookDirectory.py
+++ b/pym/portage/tests/hooks/test_HookDirectory.py
@@ -32,6 +32,7 @@ class HookDirectoryTestCase(TestCase):
 			settings["FEATURES"] += " hooks"
 			hooks = HookDirectory('test', settings)
 			hooks.execute()
+			self.assert_(settings["test"] == "this is a test")
 			self.assert_(file_len(tmp_dir_path+'/output') == 1)
 		finally:
 			rmtree(tmp_dir_path)
@@ -43,7 +44,8 @@ class HookDirectoryTestCase(TestCase):
 		
 		f = open(hooks_dir+'/testhook', 'w')
 		f.write('#!/bin/bash\n')
-		f.write('echo hi > '+tmp_dir+'/output && exit 0\n')
+		f.write('test="this is a test"\n')
+		f.write('echo hi > '+tmp_dir+'/output && hooksave test && exit 0\n')
 		f.close()
 		
 		return tmp_dir
-- 
1.6.4.4

From 1e9b20624e0b47bee454eabb23109d0c3450bccc Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Mon, 7 Jun 2010 23:18:29 -0400
Subject: [PATCH 37/52] Updated code API documentation for bash hooks code.

---
 bin/hooks.sh |   25 ++++++++++++++++++++++++-
 1 files changed, 24 insertions(+), 1 deletions(-)

diff --git a/bin/hooks.sh b/bin/hooks.sh
index 859c6a1..3c7bd63 100755
--- a/bin/hooks.sh
+++ b/bin/hooks.sh
@@ -2,6 +2,26 @@
 # Copyright 1999-2010 Gentoo Foundation
 # Distributed under the terms of the GNU General Public License v2
 
+# @MAINTAINER:
+# jacobgodserv@gmail.com
+# @BLURB: Executes hooks in the current directory.
+# @DESCRIPTION:
+# Part of the portage hooks system, this script is responsible for executing
+# hooks within a prepared environment, as well as acting as an API interface
+# between hooks and portage.
+
+# @FUNCTION: hooks_savetosettings
+# @DESCRIPTION:
+# This function saves a variable in the environment into portage's internal
+# settings variable, which is not only used by portage but also used as the
+# environment for ebuilds. The changes made here are effective until portage
+# quits, which means all ebuilds from here on will read them.
+# 
+# Takes one argument, which is the variable name to save. Arrays are allowed
+# but will be read in serialized string form.
+# 
+# NOTE: to configure only the environment of the currently running ebuild, while
+# running inside an ebuild hook, simply set the variable inside the hook.
 function hooksave () {
 	local unsecure_varname="$1"
 	local varname="$(basename ${unsecure_varname})"
@@ -15,7 +35,10 @@ function hooksave () {
 	declare -p "${varname}" | sed '1s|^[^=]*=['"'"'"]||; $s|['"'"'"]$||' > "${hooks_tmpdir}/${varname}" || return $?
 }
 
-# local variables listed here
+# Local variables listed here.
+# Using the local keyword makes no difference since this script is being sourced
+# so we'll have to unset them manually later. Be sure to keep the local_vars
+# array up-to-date.
 hook_files=( * )
 hook_args=( "$@" )
 hook_verbosity="0"
-- 
1.6.4.4

From 2172efd11c921fbaf467a5e1b3a7a8b02232a961 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Mon, 7 Jun 2010 23:20:05 -0400
Subject: [PATCH 38/52] Renamed hooksave -> hooks_savesetting, so API is semi-namespaced and clear. Also added a new function hooks_killportage.

---
 bin/hooks.sh                                  |   23 +++++++++++++++++++++--
 pym/portage/tests/hooks/test_HookDirectory.py |    2 +-
 2 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/bin/hooks.sh b/bin/hooks.sh
index 3c7bd63..cccd0c2 100755
--- a/bin/hooks.sh
+++ b/bin/hooks.sh
@@ -10,7 +10,7 @@
 # hooks within a prepared environment, as well as acting as an API interface
 # between hooks and portage.
 
-# @FUNCTION: hooks_savetosettings
+# @FUNCTION: hooks_savesetting
 # @DESCRIPTION:
 # This function saves a variable in the environment into portage's internal
 # settings variable, which is not only used by portage but also used as the
@@ -22,7 +22,7 @@
 # 
 # NOTE: to configure only the environment of the currently running ebuild, while
 # running inside an ebuild hook, simply set the variable inside the hook.
-function hooksave () {
+function hooks_savesetting () {
 	local unsecure_varname="$1"
 	local varname="$(basename ${unsecure_varname})"
 	
@@ -35,6 +35,25 @@ function hooksave () {
 	declare -p "${varname}" | sed '1s|^[^=]*=['"'"'"]||; $s|['"'"'"]$||' > "${hooks_tmpdir}/${varname}" || return $?
 }
 
+# @FUNCTION: hooks_killportage
+# @DESCRIPTION:
+# This is a convenience function, which allows a hook to stop portage
+# immediately. This will cause portage to exit cleanly, but with an error code.
+# 
+# Takes one optional argument, which is the signal, passed to kill via the -s
+# argument.
+function hooks_killportage () {
+	local signal="$1"
+	
+	local args=( )
+	if [[ "${signal}" != "" ]]; then
+		args+=( -s "${signal}" )
+	fi
+	args+=( "${PPID}" )
+	
+	kill "${args[@]}"
+}
+
 # Local variables listed here.
 # Using the local keyword makes no difference since this script is being sourced
 # so we'll have to unset them manually later. Be sure to keep the local_vars
diff --git a/pym/portage/tests/hooks/test_HookDirectory.py b/pym/portage/tests/hooks/test_HookDirectory.py
index 3527e67..e8b57bc 100644
--- a/pym/portage/tests/hooks/test_HookDirectory.py
+++ b/pym/portage/tests/hooks/test_HookDirectory.py
@@ -45,7 +45,7 @@ class HookDirectoryTestCase(TestCase):
 		f = open(hooks_dir+'/testhook', 'w')
 		f.write('#!/bin/bash\n')
 		f.write('test="this is a test"\n')
-		f.write('echo hi > '+tmp_dir+'/output && hooksave test && exit 0\n')
+		f.write('echo hi > '+tmp_dir+'/output && hooks_savesetting test && exit 0\n')
 		f.close()
 		
 		return tmp_dir
-- 
1.6.4.4

From 2f74c4f7c000d842f740ba5710530886151da146 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 00:51:53 -0400
Subject: [PATCH 39/52] Re-wrote hooks API so the option to save locally or globally is available.

---
 bin/hooks.sh                                  |   94 +++++++++++++++++++-----
 pym/portage/hooks.py                          |    9 ++-
 pym/portage/tests/hooks/test_HookDirectory.py |   30 ++++++--
 3 files changed, 101 insertions(+), 32 deletions(-)

diff --git a/bin/hooks.sh b/bin/hooks.sh
index cccd0c2..4d73a2d 100755
--- a/bin/hooks.sh
+++ b/bin/hooks.sh
@@ -10,6 +10,27 @@
 # hooks within a prepared environment, as well as acting as an API interface
 # between hooks and portage.
 
+
+# Local variables listed here.
+# Using the local keyword makes no difference since this script is being sourced
+# so we'll have to unset them manually later. Be sure to keep the local_vars
+# array up-to-date.
+hook_files=( * )
+hook_args=( "$@" )
+hook_verbosity="0"
+hooks_tmpdir_settings="${hooks_tmpdir}/settings/"
+hooks_tmpdir_envonly="${hooks_tmpdir}/envonly/"
+
+# Local variables listed here.
+# Using the local keyword makes no difference since this script is being sourced
+# so we'll have to unset them manually later. Be sure to keep these arrays
+# up-to-date.
+hook_local_vars=( "hook_files" "hook_args" "hook_verbosity" ) # variables unset for hooks
+quit_local_vars=( "hooks_tmpdir_settings" "hooks_tmpdir_envonly" "${hook_local_vars[@]}" ) # variables unset at quit
+
+mkdir "${hooks_tmpdir_settings}" || exit $?
+mkdir "${hooks_tmpdir_envonly}" || exit $?
+
 # @FUNCTION: hooks_savesetting
 # @DESCRIPTION:
 # This function saves a variable in the environment into portage's internal
@@ -17,13 +38,39 @@
 # environment for ebuilds. The changes made here are effective until portage
 # quits, which means all ebuilds from here on will read them.
 # 
-# Takes one argument, which is the variable name to save. Arrays are allowed
-# but will be read in serialized string form.
-# 
-# NOTE: to configure only the environment of the currently running ebuild, while
-# running inside an ebuild hook, simply set the variable inside the hook.
+# Takes one argument, which is the variable name to save. Arrays are allowed,
+# but portage will read them as strings only.
 function hooks_savesetting () {
+	hooks_savevarto "$1" "${hooks_tmpdir_settings}" || return $?
+}
+
+# @FUNCTION: hooks_saveenvonly
+# @DESCRIPTION:
+# Like hooks_savesetting, except that the variable will only be saved so that
+# future hooks and, if it is an ebuild hook, the current ebuild will see it. In
+# other words, the big difference is this change isn't saved in portage's
+# internal settings variable while portage is running.
+# 
+# Takes one argument, which is the variable name to save. Arrays are allowed.
+function hooks_saveenvonly () {
+	hooks_savevarto "$1" "${hooks_tmpdir_envonly}" || return $?
+}
+
+# @FUNCTION: hooks_savevarto
+# @DESCRIPTION:
+# Do not call directly.
+#
+# Used by hook APIs to serialize a variable to a file inside the specified
+# directory.
+# 
+# Takes two arguments:
+# * First is the variable name to save. Arrays are allowed, but if portage is to
+#   read this variable back, it will be read as a string.
+# * Second is the directory, which must exist. The variable name, after
+#   processed by basename, will be used as the file name.
+function hooks_savevarto () {
 	local unsecure_varname="$1"
+	local directory="$2"
 	local varname="$(basename ${unsecure_varname})"
 	
 	if [[ "${unsecure_varname}" != "${varname}" ]]; then
@@ -31,8 +78,13 @@ function hooks_savesetting () {
 		return 1
 	fi
 	
-	# hack: removes the beginning 'declare ... var=[quote]' and ending quote. Suggestions welcome.
-	declare -p "${varname}" | sed '1s|^[^=]*=['"'"'"]||; $s|['"'"'"]$||' > "${hooks_tmpdir}/${varname}" || return $?
+	if [ ! -d "${directory}" ]; then
+		eerror "${directory} is not a directory"
+		return 1
+	fi
+	
+	# removes the beginning junk we don't want, up to the equals sign
+	declare -p "${varname}" | sed '1s|^[^=]*=||' > "${directory}/${varname}" || return $?
 }
 
 # @FUNCTION: hooks_killportage
@@ -54,15 +106,6 @@ function hooks_killportage () {
 	kill "${args[@]}"
 }
 
-# Local variables listed here.
-# Using the local keyword makes no difference since this script is being sourced
-# so we'll have to unset them manually later. Be sure to keep the local_vars
-# array up-to-date.
-hook_files=( * )
-hook_args=( "$@" )
-hook_verbosity="0"
-local_vars=( "hook_files" "hook_args" "hook_verbosity" )
-
 for (( i = 0 ; i < ${#hook_args[@]} ; i++ )); do
 	if [[ "${hook_args[$i]}" == "--verbose" ]]; then
 		hook_verbosity="1"
@@ -71,7 +114,6 @@ done
 
 for (( i = 0 ; i < ${#hook_files[@]} ; i++ )); do
 	hook="${hook_files[$i]}"
-	
 	if [[ ! -f "${hook}" ]]; then
 		[ "${hook_verbosity}" -gt 0 ] && ewarn "Only files are recognized in a hook directory: ${hook}"
 		continue
@@ -79,13 +121,25 @@ for (( i = 0 ; i < ${#hook_files[@]} ; i++ )); do
 	
 	[ "${hook_verbosity}" -gt 0 ] && einfo "Executing hook ${hook}..."
 	# We use eval so the hook_args gets expanded before it is unset
-	( eval unset "${local_vars[@]}" '&&' source "${hook}" "${hook_args[@]}" )
+	( eval unset "${hook_local_vars[@]}" '&&' source "${hook}" "${hook_args[@]}" )
 	
 	exit_code="$?"
 	if [[ "${exit_code}" != "0" ]]; then
-		eerror "Hook returned with exit code ${exit_code}"
+		eerror "Hook $(pwd)/${hook} returned with exit code ${exit_code}"
 		exit "${exit_code}"
 	fi
+	
+	# We need to re-export variables that hooks saved. The goal is to let the
+	# specifically-saved variables escape the hook "( ... )" subshell and carry
+	# over into the next hook or an ebuild env.
+	var_files=( "${hooks_tmpdir_envonly}"/* "${hooks_tmpdir_settings}"/* )
+	for (( varI = 0 ; varI < ${#var_files[@]} ; varI++ )); do
+		# if there are no files, the variable points to a non-existant file, which we want to catch here
+		if [ ! -f "${var_files[$varI]}" ]; then
+			continue;
+		fi
+		eval declare -x "$(basename ${var_files[$varI]})"="$(cat ${var_files[$varI]})" || exit $?
+	done
 done
 
-unset "${local_vars[@]}"
+unset "${quit_local_vars[@]}"
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 2570067..d0db5e1 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -50,12 +50,13 @@ class HookDirectory(object):
 			try:
 				command=[BASH_BINARY, '-c', 'cd "'+path+'" && source "' + PORTAGE_BIN_PATH + '/isolated-functions.sh" && declare -xr hooks_tmpdir="'+tmpdir+'" && source ' + ' '.join(command)]
 				if self.myopts and "--verbose" in self.myopts:
-					self.output.einfo('Executing hook "' + self.path + '"...')
+					self.output.einfo('Executing hooks directory "' + self.path + '"...')
 				code = spawn(mycommand=command, env=self.settings.environ())
 				if code: # if failure
-					raise PortageException('!!! Hook %s failed with exit code %s' % (self.path, code))
+					raise PortageException('!!! Hook directory %s failed with exit code %s' % (self.path, code))
 					
-				self.settings = self.merge_to_env (self.settings, tmpdir)
+				if os.path.exists(tmpdir+'/settings/'):
+					self.settings = self.merge_to_env (self.settings, tmpdir+'/settings/')
 				
 			finally:
 				rmtree(tmpdir)
@@ -73,7 +74,7 @@ class HookDirectory(object):
 			for varname in files:
 				file = open(os.path.join(path, varname), 'r')
 				# read the file, remove the very last newline, and make the escaped double-quotes just plain double-quotes (since only bash needs them to be escaped, not python)
-				vardata = file.read()[:-1].replace('\"','"')
+				vardata = file.read()[:-1].replace('\"','"').strip('"')
 				existingenv[varname] = vardata
 				existingenv.backup_changes(varname)
 		
diff --git a/pym/portage/tests/hooks/test_HookDirectory.py b/pym/portage/tests/hooks/test_HookDirectory.py
index e8b57bc..5e1cebc 100644
--- a/pym/portage/tests/hooks/test_HookDirectory.py
+++ b/pym/portage/tests/hooks/test_HookDirectory.py
@@ -25,27 +25,41 @@ class HookDirectoryTestCase(TestCase):
 		Based on test_PackageKeywordsFile.py
 		"""
 
-		tmp_dir_path = self.BuildTmp('/etc/portage/hooks/test.d')
+		self.tmp_dir_path = self.BuildTmp('/etc/portage/hooks/test.d')
 		try:
 			settings = config()
-			settings["PORTAGE_CONFIGROOT"] = tmp_dir_path
+			settings["PORTAGE_CONFIGROOT"] = self.tmp_dir_path
 			settings["FEATURES"] += " hooks"
-			hooks = HookDirectory('test', settings)
+			hooks = HookDirectory(phase='test', settings=settings)
 			hooks.execute()
-			self.assert_(settings["test"] == "this is a test")
-			self.assert_(file_len(tmp_dir_path+'/output') == 1)
+			self.assert_(settings["test"] == "this is another test")
+			self.assert_(settings["test2"] == "this is a second test")
+			self.assert_(settings["hookonlytest"] == "")
+			self.assert_(file_len(self.tmp_dir_path+'/output') == 2)
 		finally:
-			rmtree(tmp_dir_path)
+			rmtree(self.tmp_dir_path)
 	
 	def BuildTmp(self, tmp_subdir):
 		tmp_dir = mkdtemp()
 		hooks_dir = tmp_dir + '/' + tmp_subdir
 		os.makedirs(hooks_dir)
 		
-		f = open(hooks_dir+'/testhook', 'w')
+		f = open(hooks_dir+'/1-testhook', 'w')
 		f.write('#!/bin/bash\n')
 		f.write('test="this is a test"\n')
-		f.write('echo hi > '+tmp_dir+'/output && hooks_savesetting test && exit 0\n')
+		f.write('hookonlytest="portage cannot see me!"\n')
+		f.write('echo hi >> '+tmp_dir+'/output && hooks_savesetting test && hooks_saveenvonly hookonlytest\n')
+		f.write('exit $?\n')
+		f.close()
+		
+		f = open(hooks_dir+'/2-testhook', 'w')
+		f.write('#!/bin/bash\n')
+		f.write('if [[ "${test}" != "this is a test" ]]; then echo "Unexpected test value: ${test}"; exit 3; fi\n');
+		f.write('if [[ "${hookonlytest}" != "portage cannot see me!" ]]; then echo "Unexpected hookonlytest value: ${hookonlytest}"; exit 3; fi\n');
+		f.write('test="this is another test"\n')
+		f.write('test2="this is a second test"\n')
+		f.write('echo hey >> '+tmp_dir+'/output && hooks_savesetting test && hooks_savesetting test2\n')
+		f.write('exit $?\n')
 		f.close()
 		
 		return tmp_dir
-- 
1.6.4.4

From 5d8fd4faebbbe50628e2e35e98a0acdd513e9658 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 01:18:08 -0400
Subject: [PATCH 40/52] Added pre-ebuild to ebuild.sh; about to test

---
 bin/ebuild.sh                        |   17 +++++++++++++++++
 pym/portage/hooks.py                 |    2 ++
 pym/portage/package/ebuild/config.py |    5 +++++
 3 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/bin/ebuild.sh b/bin/ebuild.sh
index 60c8f5e..164da83 100755
--- a/bin/ebuild.sh
+++ b/bin/ebuild.sh
@@ -1756,6 +1756,23 @@ preprocess_ebuild_env() {
 	return ${retval}
 }
 
+# Process pre-ebuild hook
+oldwd="$(pwd)"
+hooks_tmpdir="${PORTAGE_TMPDIR}/hooks"
+cd "${HOOKS_PATH}/pre-ebuild.d"
+exit_code="$?"
+if [[ "${exit_code}" != "0" ]]; then
+	# mimicks behavior in hooks.py
+	debug-print "This hook path could not be found; ignored: ${HOOKS_PATH}/pre-ebuild.d"
+fi
+source "${HOOKS_BIN_PATH}" --action "${EBUILD_PHASE}" --target "${$EBUILD}"
+rm -rf "${hooks_tmpdir}"
+exit_code="$?"
+if [[ "${exit_code}" != "0" ]]; then
+	# mimicks behavior in hooks.py
+	die "Hook directory ${HOOKS_PATH}/pre-ebuild.d failed with exit code ${exit_code}"
+fi
+
 # === === === === === === === === === === === === === === === === === ===
 # === === === === === functions end, main part begins === === === === ===
 # === === === === === functions end, main part begins === === === === ===
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index d0db5e1..2c42da6 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -32,6 +32,7 @@ class HookDirectory(object):
 		
 		if not os.path.exists(path):
 			if self.myopts and "--debug" in self.myopts:
+				# behavior mimicked ebuild.sh
 				self.output.ewarn('This hook path could not be found; ignored: ' + path)
 			return
 		
@@ -53,6 +54,7 @@ class HookDirectory(object):
 					self.output.einfo('Executing hooks directory "' + self.path + '"...')
 				code = spawn(mycommand=command, env=self.settings.environ())
 				if code: # if failure
+					# behavior mimicked ebuild.sh
 					raise PortageException('!!! Hook directory %s failed with exit code %s' % (self.path, code))
 					
 				if os.path.exists(tmpdir+'/settings/'):
diff --git a/pym/portage/package/ebuild/config.py b/pym/portage/package/ebuild/config.py
index 908b6b6..49232dd 100644
--- a/pym/portage/package/ebuild/config.py
+++ b/pym/portage/package/ebuild/config.py
@@ -170,6 +170,7 @@ class config(object):
 		"EBUILD_PHASE", "ECLASSDIR", "ECLASS_DEPTH", "ED",
 		"EMERGE_FROM", "EPREFIX", "EROOT",
 		"FEATURES", "FILESDIR", "HOME", "NOCOLOR", "PATH",
+		"HOOKS_PATH", "HOOKS_SH_BINARY",
 		"PKGDIR",
 		"PKGUSE", "PKG_LOGDIR", "PKG_TMPDIR",
 		"PORTAGE_ACTUAL_DISTDIR", "PORTAGE_ARCHLIST",
@@ -758,6 +759,8 @@ class config(object):
 
 			self["PORTAGE_CONFIGROOT"] = config_root
 			self.backup_changes("PORTAGE_CONFIGROOT")
+			self["HOOKS_PATH"] = HOOKS_PATH
+			self.backup_changes("HOOKS_PATH")
 			self["ROOT"] = target_root
 			self.backup_changes("ROOT")
 
@@ -982,6 +985,8 @@ class config(object):
 
 			self["PORTAGE_BIN_PATH"] = PORTAGE_BIN_PATH
 			self.backup_changes("PORTAGE_BIN_PATH")
+			self["HOOKS_BIN_PATH"] = HOOKS_BIN_PATH
+			self.backup_changes("HOOKS_BIN_PATH")
 			self["PORTAGE_PYM_PATH"] = PORTAGE_PYM_PATH
 			self.backup_changes("PORTAGE_PYM_PATH")
 
-- 
1.6.4.4

From 02b6a752da80678bb4462075fa127d2e66487acb Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 01:19:33 -0400
Subject: [PATCH 41/52] Small typo

---
 bin/ebuild.sh |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/bin/ebuild.sh b/bin/ebuild.sh
index 164da83..99eb196 100755
--- a/bin/ebuild.sh
+++ b/bin/ebuild.sh
@@ -1765,7 +1765,7 @@ if [[ "${exit_code}" != "0" ]]; then
 	# mimicks behavior in hooks.py
 	debug-print "This hook path could not be found; ignored: ${HOOKS_PATH}/pre-ebuild.d"
 fi
-source "${HOOKS_BIN_PATH}" --action "${EBUILD_PHASE}" --target "${$EBUILD}"
+source "${HOOKS_BIN_PATH}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
 rm -rf "${hooks_tmpdir}"
 exit_code="$?"
 if [[ "${exit_code}" != "0" ]]; then
-- 
1.6.4.4

From 38d57468813c022271164d386f208358b6924233 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 01:30:46 -0400
Subject: [PATCH 42/52] Bug fixes, where paths were relative, and a failing cd command would spill all over the terminal

---
 bin/ebuild.sh                        |   21 ++++++++++++---------
 pym/portage/package/ebuild/config.py |   11 ++++++-----
 2 files changed, 18 insertions(+), 14 deletions(-)

diff --git a/bin/ebuild.sh b/bin/ebuild.sh
index 99eb196..8913a61 100755
--- a/bin/ebuild.sh
+++ b/bin/ebuild.sh
@@ -1759,19 +1759,22 @@ preprocess_ebuild_env() {
 # Process pre-ebuild hook
 oldwd="$(pwd)"
 hooks_tmpdir="${PORTAGE_TMPDIR}/hooks"
-cd "${HOOKS_PATH}/pre-ebuild.d"
+hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/pre-ebuild.d"
+( [ ! -d "${hooks_dir}" ] && exit 1 ) || cd "${hooks_dir}"
 exit_code="$?"
 if [[ "${exit_code}" != "0" ]]; then
 	# mimicks behavior in hooks.py
-	debug-print "This hook path could not be found; ignored: ${HOOKS_PATH}/pre-ebuild.d"
-fi
-source "${HOOKS_BIN_PATH}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
-rm -rf "${hooks_tmpdir}"
-exit_code="$?"
-if [[ "${exit_code}" != "0" ]]; then
-	# mimicks behavior in hooks.py
-	die "Hook directory ${HOOKS_PATH}/pre-ebuild.d failed with exit code ${exit_code}"
+	debug-print "This hook path could not be found; ignored: ${hooks_dir}"
+else
+	source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
+	rm -rf "${hooks_tmpdir}"
+	exit_code="$?"
+	if [[ "${exit_code}" != "0" ]]; then
+		# mimicks behavior in hooks.py
+		die "Hook directory ${HOOKS_PATH}/pre-ebuild.d failed with exit code ${exit_code}"
+	fi
 fi
+cd "${oldwd}" || die "Could not return to the old ebuild directory after pre-ebuild hooks: ${oldwd}"
 
 # === === === === === === === === === === === === === === === === === ===
 # === === === === === functions end, main part begins === === === === ===
diff --git a/pym/portage/package/ebuild/config.py b/pym/portage/package/ebuild/config.py
index 49232dd..10ca527 100644
--- a/pym/portage/package/ebuild/config.py
+++ b/pym/portage/package/ebuild/config.py
@@ -23,9 +23,10 @@ import portage
 from portage import bsd_chflags, eapi_is_supported, \
 	load_mod, os, selinux, _encodings, _unicode_encode, _unicode_decode
 from portage.const import CACHE_PATH, CUSTOM_PROFILE_PATH, \
-	DEPCACHE_PATH, GLOBAL_CONFIG_PATH, INCREMENTALS, MAKE_CONF_FILE, \
-	MODULES_FILE_PATH, PORTAGE_BIN_PATH, PORTAGE_PYM_PATH, \
-	PRIVATE_PATH, PROFILE_PATH, USER_CONFIG_PATH, USER_VIRTUALS_FILE
+	DEPCACHE_PATH, GLOBAL_CONFIG_PATH, HOOKS_PATH, HOOKS_SH_BINARY, \
+	INCREMENTALS, MAKE_CONF_FILE, MODULES_FILE_PATH, PORTAGE_BIN_PATH, \
+	PORTAGE_PYM_PATH, PRIVATE_PATH, PROFILE_PATH, USER_CONFIG_PATH, \
+	USER_VIRTUALS_FILE
 from portage.data import portage_gid
 from portage.dbapi import dbapi
 from portage.dbapi.porttree import portdbapi
@@ -985,8 +986,8 @@ class config(object):
 
 			self["PORTAGE_BIN_PATH"] = PORTAGE_BIN_PATH
 			self.backup_changes("PORTAGE_BIN_PATH")
-			self["HOOKS_BIN_PATH"] = HOOKS_BIN_PATH
-			self.backup_changes("HOOKS_BIN_PATH")
+			self["HOOKS_SH_BINARY"] = HOOKS_SH_BINARY
+			self.backup_changes("HOOKS_SH_BINARY")
 			self["PORTAGE_PYM_PATH"] = PORTAGE_PYM_PATH
 			self.backup_changes("PORTAGE_PYM_PATH")
 
-- 
1.6.4.4

From 79556fbbb9810a8b0edd3cbc59733ba1a7353992 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 01:37:13 -0400
Subject: [PATCH 43/52] Better (i.e. less buggy) handling of hooks_tmpdir in ebuild.sh

---
 bin/ebuild.sh |    5 ++---
 1 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/bin/ebuild.sh b/bin/ebuild.sh
index 8913a61..7e94f46 100755
--- a/bin/ebuild.sh
+++ b/bin/ebuild.sh
@@ -1758,7 +1758,7 @@ preprocess_ebuild_env() {
 
 # Process pre-ebuild hook
 oldwd="$(pwd)"
-hooks_tmpdir="${PORTAGE_TMPDIR}/hooks"
+hooks_tmpdir="${T}/hooks"
 hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/pre-ebuild.d"
 ( [ ! -d "${hooks_dir}" ] && exit 1 ) || cd "${hooks_dir}"
 exit_code="$?"
@@ -1766,8 +1766,7 @@ if [[ "${exit_code}" != "0" ]]; then
 	# mimicks behavior in hooks.py
 	debug-print "This hook path could not be found; ignored: ${hooks_dir}"
 else
-	source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
-	rm -rf "${hooks_tmpdir}"
+	mkdir "${hooks_tmpdir}" && source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
 	exit_code="$?"
 	if [[ "${exit_code}" != "0" ]]; then
 		# mimicks behavior in hooks.py
-- 
1.6.4.4

From acc4716ed7da1d943510dac281046e261837b87e Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 01:58:38 -0400
Subject: [PATCH 44/52] Better support for post-ebuild functionality; about to test

---
 bin/ebuild.sh                          |   18 +-----------------
 bin/hooks.sh                           |   28 ++++++++++++++++++++++++++++
 pym/portage/package/ebuild/doebuild.py |    4 ++--
 3 files changed, 31 insertions(+), 19 deletions(-)

diff --git a/bin/ebuild.sh b/bin/ebuild.sh
index 7e94f46..9347953 100755
--- a/bin/ebuild.sh
+++ b/bin/ebuild.sh
@@ -1757,23 +1757,7 @@ preprocess_ebuild_env() {
 }
 
 # Process pre-ebuild hook
-oldwd="$(pwd)"
-hooks_tmpdir="${T}/hooks"
-hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/pre-ebuild.d"
-( [ ! -d "${hooks_dir}" ] && exit 1 ) || cd "${hooks_dir}"
-exit_code="$?"
-if [[ "${exit_code}" != "0" ]]; then
-	# mimicks behavior in hooks.py
-	debug-print "This hook path could not be found; ignored: ${hooks_dir}"
-else
-	mkdir "${hooks_tmpdir}" && source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
-	exit_code="$?"
-	if [[ "${exit_code}" != "0" ]]; then
-		# mimicks behavior in hooks.py
-		die "Hook directory ${HOOKS_PATH}/pre-ebuild.d failed with exit code ${exit_code}"
-	fi
-fi
-cd "${oldwd}" || die "Could not return to the old ebuild directory after pre-ebuild hooks: ${oldwd}"
+source "${HOOKS_SH_BINARY}" --do-pre-ebuild
 
 # === === === === === === === === === === === === === === === === === ===
 # === === === === === functions end, main part begins === === === === ===
diff --git a/bin/hooks.sh b/bin/hooks.sh
index 4d73a2d..1a672a9 100755
--- a/bin/hooks.sh
+++ b/bin/hooks.sh
@@ -10,6 +10,34 @@
 # hooks within a prepared environment, as well as acting as an API interface
 # between hooks and portage.
 
+# This code is put here so it's easier to do one-liners elsewhere.
+if [[ "$1" == "--do-pre-ebuild" || "$1" == "--do-post-ebuild" ]]; then
+	if hasq hooks $FEATURES ; then
+		oldwd="$(pwd)"
+		hooks_tmpdir="${T}/hooks"
+		if [[ "$1" == "--do-pre-ebuild" ]]; then
+			hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/pre-ebuild.d"
+		else
+			hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/post-ebuild.d"
+		fi
+		( [ ! -d "${hooks_dir}" ] && exit 1 ) && cd "${hooks_dir}"
+		exit_code="$?"
+		if [[ "${exit_code}" != "0" ]]; then
+			# mimicks behavior in hooks.py
+			debug-print "This hook path could not be found; ignored: ${hooks_dir}"
+		else
+			mkdir "${hooks_tmpdir}" && source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
+			exit_code="$?"
+			if [[ "${exit_code}" != "0" ]]; then
+				# mimicks behavior in hooks.py
+				die "Hook directory ${HOOKS_PATH}/pre-ebuild.d failed with exit code ${exit_code}"
+			fi
+		fi
+		cd "${oldwd}" || die "Could not return to the old ebuild directory after pre-ebuild hooks: ${oldwd}"
+	fi
+	
+	return
+fi
 
 # Local variables listed here.
 # Using the local keyword makes no difference since this script is being sourced
diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 72d3716..874527d 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -936,8 +936,8 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 
 		fakeroot = "fakeroot" in mysettings.features
 
-		ebuild_sh = _shell_quote(ebuild_sh_binary) + " %s"
-		misc_sh = _shell_quote(misc_sh_binary) + " dyn_%s"
+		ebuild_sh = _shell_quote(ebuild_sh_binary) + " %s && source \""+HOOKS_SH_BINARY+"\" --do-post-ebuild"
+		misc_sh = _shell_quote(misc_sh_binary) + " dyn_%s && source \""+HOOKS_SH_BINARY+"\" --do-post-ebuild"
 
 		# args are for the to spawn function
 		actionmap = {
-- 
1.6.4.4

From 68e789d0af441dea6254a884f3adf0a4d76b52a3 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 02:01:13 -0400
Subject: [PATCH 45/52] Bug fix: HOOKS_SH_BINARY wasn't imported

---
 pym/portage/package/ebuild/doebuild.py |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 874527d..6ad32b7 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -22,6 +22,7 @@ import time
 
 import portage
 portage.proxy.lazyimport.lazyimport(globals(),
+	'portage.package.ebuild.const:HOOKS_SH_BINARY',
 	'portage.package.ebuild.config:check_config_instance',
 	'portage.package.ebuild.digestcheck:digestcheck',
 	'portage.package.ebuild.digestgen:digestgen',
-- 
1.6.4.4

From e44547570a9d43d223a3427f3b75cfec7dade4b5 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 03:46:13 -0400
Subject: [PATCH 46/52] Another round of bug fixes to properly insert post-ebuild hooks

---
 bin/ebuild.sh |    2 ++
 bin/hooks.sh  |   20 ++++++++++++++++----
 2 files changed, 18 insertions(+), 4 deletions(-)

diff --git a/bin/ebuild.sh b/bin/ebuild.sh
index 9347953..deb625b 100755
--- a/bin/ebuild.sh
+++ b/bin/ebuild.sh
@@ -661,6 +661,8 @@ _eapi4_src_install() {
 
 ebuild_phase() {
 	declare -F "$1" >/dev/null && qa_call $1
+	# Process post-ebuild hooks for the actual phase (and not internal pre/post phase hooks)
+	[[ "$(expr match $1 '^pre_\|^post_')" == "0" ]] && source "${HOOKS_SH_BINARY}" --do-post-ebuild
 }
 
 ebuild_phase_with_hooks() {
diff --git a/bin/hooks.sh b/bin/hooks.sh
index 1a672a9..ce62a7a 100755
--- a/bin/hooks.sh
+++ b/bin/hooks.sh
@@ -12,21 +12,33 @@
 
 # This code is put here so it's easier to do one-liners elsewhere.
 if [[ "$1" == "--do-pre-ebuild" || "$1" == "--do-post-ebuild" ]]; then
+	if [[ "${EBUILD_PHASE}" == "" ]]; then
+		# probably die_hooks or something evil
+		return
+	fi
+	
+	if ! type hasq &> /dev/null; then
+		source "${PORTAGE_BIN_PATH}/isolated-functions.sh" &> /dev/null
+	fi
 	if hasq hooks $FEATURES ; then
 		oldwd="$(pwd)"
-		hooks_tmpdir="${T}/hooks"
 		if [[ "$1" == "--do-pre-ebuild" ]]; then
+			hooks_tmpdir="${T}/hooks-pre-${EBUILD_PHASE}"
 			hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/pre-ebuild.d"
 		else
+			hooks_tmpdir="${T}/hooks-post-${EBUILD_PHASE}"
 			hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/post-ebuild.d"
 		fi
-		( [ ! -d "${hooks_dir}" ] && exit 1 ) && cd "${hooks_dir}"
+		[ -d "${hooks_dir}" ] && cd "${hooks_dir}"
 		exit_code="$?"
 		if [[ "${exit_code}" != "0" ]]; then
 			# mimicks behavior in hooks.py
-			debug-print "This hook path could not be found; ignored: ${hooks_dir}"
+			# TODO: --verbose detection?
+			:
+			#debug-print "This hook path could not be found; ignored: ${hooks_dir}"
 		else
-			mkdir "${hooks_tmpdir}" && source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
+			mkdir "${hooks_tmpdir}" || die "Could not create temporary hooks output directory: ${hooks_tmpdir}"
+			source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
 			exit_code="$?"
 			if [[ "${exit_code}" != "0" ]]; then
 				# mimicks behavior in hooks.py
-- 
1.6.4.4

From 7c4e181f5cbdb873aaab531b100f48e8298040f0 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 03:48:05 -0400
Subject: [PATCH 47/52] Removed old post-ebuild hooks

---
 pym/portage/package/ebuild/doebuild.py |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 6ad32b7..d05062e 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -937,8 +937,8 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 
 		fakeroot = "fakeroot" in mysettings.features
 
-		ebuild_sh = _shell_quote(ebuild_sh_binary) + " %s && source \""+HOOKS_SH_BINARY+"\" --do-post-ebuild"
-		misc_sh = _shell_quote(misc_sh_binary) + " dyn_%s && source \""+HOOKS_SH_BINARY+"\" --do-post-ebuild"
+		ebuild_sh = _shell_quote(ebuild_sh_binary) + " %s"
+		misc_sh = _shell_quote(misc_sh_binary) + " dyn_%s"
 
 		# args are for the to spawn function
 		actionmap = {
-- 
1.6.4.4

From a197bc417c48d2d0712e6e0cf7745ea911559e99 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 03:51:30 -0400
Subject: [PATCH 48/52] Removed more old ebuild hooks.

---
 pym/portage/package/ebuild/doebuild.py |    4 ----
 1 files changed, 0 insertions(+), 4 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index d05062e..4218fd4 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -534,8 +534,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		doebuild_environment(myebuild, mydo, myroot, mysettings, debug,
 			use_cache, mydbapi)
 
-		HookDirectory(phase='pre-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
-
 		if mydo in clean_phases:
 			retval = spawn(_shell_quote(ebuild_sh_binary) + " clean",
 				mysettings, debug=debug, fd_pipes=fd_pipes, free=1,
@@ -1038,8 +1036,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			# and the exemption is no longer needed.
 			portage._doebuild_manifest_exempt_depend -= 1
 		
-		HookDirectory(phase='post-ebuild', settings=mysettings, myopts=None, myaction=mydo, mytargets=[mysettings["EBUILD"]]).execute()
-
 def _validate_deps(mysettings, myroot, mydo, mydbapi):
 
 	invalid_dep_exempt_phases = \
-- 
1.6.4.4

From 78dee1b2840804c7ac201ac62b81958ab6e2b5f4 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 15:01:01 -0400
Subject: [PATCH 49/52] Lots of bug fixing, most of which is to allow hooks_savesetting to actually take effect while inside ebuild.sh

---
 bin/hooks.sh                           |  114 +++++++++++++++++++-------------
 pym/portage/hooks.py                   |    9 ++-
 pym/portage/package/ebuild/config.py   |    2 +-
 pym/portage/package/ebuild/doebuild.py |    9 +++
 4 files changed, 85 insertions(+), 49 deletions(-)

diff --git a/bin/hooks.sh b/bin/hooks.sh
index ce62a7a..bc69311 100755
--- a/bin/hooks.sh
+++ b/bin/hooks.sh
@@ -10,43 +10,50 @@
 # hooks within a prepared environment, as well as acting as an API interface
 # between hooks and portage.
 
+# Only run hooks if it's requested in $FEATURES
+if ! (source "${PORTAGE_BIN_PATH}/isolated-functions.sh" && hasq hooks $FEATURES) ; then
+	return
+fi
+
+# TODO: unit testing does not cover this portion of hooks.sh
 # This code is put here so it's easier to do one-liners elsewhere.
+# This section is meant to be run by ebuild.sh
 if [[ "$1" == "--do-pre-ebuild" || "$1" == "--do-post-ebuild" ]]; then
 	if [[ "${EBUILD_PHASE}" == "" ]]; then
-		# probably die_hooks or something evil
+		# an in-between-phases moment; useless to hooks
 		return
 	fi
 	
-	if ! type hasq &> /dev/null; then
-		source "${PORTAGE_BIN_PATH}/isolated-functions.sh" &> /dev/null
+
+	oldwd="$(pwd)"
+	if [[ "$1" == "--do-pre-ebuild" ]]; then
+		hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/pre-ebuild.d"
+	else
+		hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/post-ebuild.d"
 	fi
-	if hasq hooks $FEATURES ; then
-		oldwd="$(pwd)"
-		if [[ "$1" == "--do-pre-ebuild" ]]; then
-			hooks_tmpdir="${T}/hooks-pre-${EBUILD_PHASE}"
-			hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/pre-ebuild.d"
-		else
-			hooks_tmpdir="${T}/hooks-post-${EBUILD_PHASE}"
-			hooks_dir="${PORTAGE_CONFIGROOT}/${HOOKS_PATH}/post-ebuild.d"
+	
+	[ -d "${hooks_dir}" ] && cd "${hooks_dir}"
+	exit_code="$?"
+	if [[ "${exit_code}" != "0" ]]; then
+		# mimicks behavior in hooks.py
+		# TODO: --verbose detection?
+		:
+		#debug-print "This hook path could not be found; ignored: ${hooks_dir}"
+	else
+		# Create the temporary directory if needed
+		if [ ! -d "${HOOKS_TMPDIR}" ]; then
+			mkdir "${HOOKS_TMPDIR}" || die "Could not create temporary hooks output directory: ${HOOKS_TMPDIR}"
 		fi
-		[ -d "${hooks_dir}" ] && cd "${hooks_dir}"
+		
+		# Execute the hooks
+		source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
 		exit_code="$?"
 		if [[ "${exit_code}" != "0" ]]; then
 			# mimicks behavior in hooks.py
-			# TODO: --verbose detection?
-			:
-			#debug-print "This hook path could not be found; ignored: ${hooks_dir}"
-		else
-			mkdir "${hooks_tmpdir}" || die "Could not create temporary hooks output directory: ${hooks_tmpdir}"
-			source "${HOOKS_SH_BINARY}" --action "${EBUILD_PHASE}" --target "${EBUILD}"
-			exit_code="$?"
-			if [[ "${exit_code}" != "0" ]]; then
-				# mimicks behavior in hooks.py
-				die "Hook directory ${HOOKS_PATH}/pre-ebuild.d failed with exit code ${exit_code}"
-			fi
+			die "Hook directory ${HOOKS_PATH}/pre-ebuild.d failed with exit code ${exit_code}"
 		fi
-		cd "${oldwd}" || die "Could not return to the old ebuild directory after pre-ebuild hooks: ${oldwd}"
 	fi
+	cd "${oldwd}" || die "Could not return to the old ebuild directory after pre-ebuild hooks: ${oldwd}"
 	
 	return
 fi
@@ -58,18 +65,20 @@ fi
 hook_files=( * )
 hook_args=( "$@" )
 hook_verbosity="0"
-hooks_tmpdir_settings="${hooks_tmpdir}/settings/"
-hooks_tmpdir_envonly="${hooks_tmpdir}/envonly/"
+HOOKS_TMPDIR_settings="${HOOKS_TMPDIR}/settings/"
+HOOKS_TMPDIR_envonly="${HOOKS_TMPDIR}/envonly/"
 
-# Local variables listed here.
-# Using the local keyword makes no difference since this script is being sourced
-# so we'll have to unset them manually later. Be sure to keep these arrays
-# up-to-date.
 hook_local_vars=( "hook_files" "hook_args" "hook_verbosity" ) # variables unset for hooks
-quit_local_vars=( "hooks_tmpdir_settings" "hooks_tmpdir_envonly" "${hook_local_vars[@]}" ) # variables unset at quit
+quit_local_vars=( "HOOKS_TMPDIR_settings" "HOOKS_TMPDIR_envonly" "${hook_local_vars[@]}" ) # variables unset at quit
 
-mkdir "${hooks_tmpdir_settings}" || exit $?
-mkdir "${hooks_tmpdir_envonly}" || exit $?
+# Create the directories we'll be using, if they don't already exist.
+# Settings directory can exist, since it's global anyway
+if [ ! -d "${HOOKS_TMPDIR_settings}" ]; then
+	mkdir "${HOOKS_TMPDIR_settings}" || exit $?
+fi
+# Envonly directory cannot exist, since these vars are local only
+[ -d "${HOOKS_TMPDIR_envonly}" ] && rm -rf "${HOOKS_TMPDIR_envonly}"
+mkdir "${HOOKS_TMPDIR_envonly}" || exit $?
 
 # @FUNCTION: hooks_savesetting
 # @DESCRIPTION:
@@ -77,28 +86,32 @@ mkdir "${hooks_tmpdir_envonly}" || exit $?
 # settings variable, which is not only used by portage but also used as the
 # environment for ebuilds. The changes made here are effective until portage
 # quits, which means all ebuilds from here on will read them.
+#
+# Be careful: portage resets the internal settings variable at each ebuild phase
+# and only allows whitelisted variables to persist beyond ebuild phases. Do not
+# use this to store hook-specific settings!
 # 
-# Takes one argument, which is the variable name to save. Arrays are allowed,
-# but portage will read them as strings only.
+# Takes one argument, which is the variable name to save. Arrays are allowed but
+# discouraged, since portage will read them as serialized strings only.
 function hooks_savesetting () {
-	hooks_savevarto "$1" "${hooks_tmpdir_settings}" || return $?
+	hooks_savevarto "$1" "${HOOKS_TMPDIR_settings}" || return $?
 }
 
 # @FUNCTION: hooks_saveenvonly
 # @DESCRIPTION:
 # Like hooks_savesetting, except that the variable will only be saved so that
-# future hooks and, if it is an ebuild hook, the current ebuild will see it. In
-# other words, the big difference is this change isn't saved in portage's
+# future hooks and, if it is an ebuild hook, the current ebuild phase will see
+# it. In other words, the big difference is this change isn't saved in portage's
 # internal settings variable while portage is running.
 # 
 # Takes one argument, which is the variable name to save. Arrays are allowed.
 function hooks_saveenvonly () {
-	hooks_savevarto "$1" "${hooks_tmpdir_envonly}" || return $?
+	hooks_savevarto "$1" "${HOOKS_TMPDIR_envonly}" || return $?
 }
 
 # @FUNCTION: hooks_savevarto
 # @DESCRIPTION:
-# Do not call directly.
+# Hook developers are highly discouraged from calling directly.
 #
 # Used by hook APIs to serialize a variable to a file inside the specified
 # directory.
@@ -130,10 +143,15 @@ function hooks_savevarto () {
 # @FUNCTION: hooks_killportage
 # @DESCRIPTION:
 # This is a convenience function, which allows a hook to stop portage
-# immediately. This will cause portage to exit cleanly, but with an error code.
+# immediately. This will cause portage to exit without whining too much.
+# Portage will still exit with an error code, breaking wrapper scripts like
+# eix-sync.
 # 
-# Takes one optional argument, which is the signal, passed to kill via the -s
-# argument.
+# Takes one optional argument, which is the kill signal, passed to kill via the
+# -s argument. Otherwise, uses kill's default signal.
+
+# TODO: unable to test with unit tests, since it forces even the testing module
+# to quit
 function hooks_killportage () {
 	local signal="$1"
 	
@@ -172,13 +190,19 @@ for (( i = 0 ; i < ${#hook_files[@]} ; i++ )); do
 	# We need to re-export variables that hooks saved. The goal is to let the
 	# specifically-saved variables escape the hook "( ... )" subshell and carry
 	# over into the next hook or an ebuild env.
-	var_files=( "${hooks_tmpdir_envonly}"/* "${hooks_tmpdir_settings}"/* )
+	var_files=( "${HOOKS_TMPDIR_envonly}"/* "${HOOKS_TMPDIR_settings}"/* )
 	for (( varI = 0 ; varI < ${#var_files[@]} ; varI++ )); do
+		varname="$(basename ${var_files[$varI]})"
 		# if there are no files, the variable points to a non-existant file, which we want to catch here
 		if [ ! -f "${var_files[$varI]}" ]; then
 			continue;
 		fi
-		eval declare -x "$(basename ${var_files[$varI]})"="$(cat ${var_files[$varI]})" || exit $?
+		# if the variable is not read-only
+		if $(unset "${varname}" 2> /dev/null) ; then
+			eval declare -x "$(basename ${var_files[$varI]})"="$(cat ${var_files[$varI]})" || exit $?
+		else
+			ewarn "A hook tried to modify a read-only variable: ${varname}"
+		fi
 	done
 done
 
diff --git a/pym/portage/hooks.py b/pym/portage/hooks.py
index 2c42da6..ceaf5ef 100644
--- a/pym/portage/hooks.py
+++ b/pym/portage/hooks.py
@@ -25,6 +25,9 @@ class HookDirectory(object):
 		self.output = EOutput()
 
 	def execute (self, path=None):
+		if "hooks" not in self.settings['FEATURES']:
+			return
+		
 		if not path:
 			path = self.path
 		
@@ -32,7 +35,7 @@ class HookDirectory(object):
 		
 		if not os.path.exists(path):
 			if self.myopts and "--debug" in self.myopts:
-				# behavior mimicked ebuild.sh
+				# behavior mimicked by hook.sh
 				self.output.ewarn('This hook path could not be found; ignored: ' + path)
 			return
 		
@@ -49,12 +52,12 @@ class HookDirectory(object):
 			
 			tmpdir = mkdtemp()
 			try:
-				command=[BASH_BINARY, '-c', 'cd "'+path+'" && source "' + PORTAGE_BIN_PATH + '/isolated-functions.sh" && declare -xr hooks_tmpdir="'+tmpdir+'" && source ' + ' '.join(command)]
+				command=[BASH_BINARY, '-c', 'cd "'+path+'" && source "' + PORTAGE_BIN_PATH + '/isolated-functions.sh" && declare -x HOOKS_TMPDIR="'+tmpdir+'" && source ' + ' '.join(command)]
 				if self.myopts and "--verbose" in self.myopts:
 					self.output.einfo('Executing hooks directory "' + self.path + '"...')
 				code = spawn(mycommand=command, env=self.settings.environ())
 				if code: # if failure
-					# behavior mimicked ebuild.sh
+					# behavior mimicked by hook.sh
 					raise PortageException('!!! Hook directory %s failed with exit code %s' % (self.path, code))
 					
 				if os.path.exists(tmpdir+'/settings/'):
diff --git a/pym/portage/package/ebuild/config.py b/pym/portage/package/ebuild/config.py
index 10ca527..df351b0 100644
--- a/pym/portage/package/ebuild/config.py
+++ b/pym/portage/package/ebuild/config.py
@@ -171,7 +171,7 @@ class config(object):
 		"EBUILD_PHASE", "ECLASSDIR", "ECLASS_DEPTH", "ED",
 		"EMERGE_FROM", "EPREFIX", "EROOT",
 		"FEATURES", "FILESDIR", "HOME", "NOCOLOR", "PATH",
-		"HOOKS_PATH", "HOOKS_SH_BINARY",
+		"HOOKS_PATH", "HOOKS_SH_BINARY", "HOOKS_TMPDIR",
 		"PKGDIR",
 		"PKGUSE", "PKG_LOGDIR", "PKG_TMPDIR",
 		"PORTAGE_ACTUAL_DISTDIR", "PORTAGE_ARCHLIST",
diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 4218fd4..8e2edb5 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -143,6 +143,8 @@ def doebuild_environment(myebuild, mydo, myroot, mysettings,
 	mysettings["PN"] = mysplit[0]
 	mysettings["PV"] = mysplit[1]
 	mysettings["PR"] = mysplit[2]
+	
+	mysettings["HOOKS_TMPDIR"] = mysettings["PORTAGE_TMPDIR"]+"/hooks-"+mysettings["P"]
 
 	if noiselimit < 0:
 		mysettings["PORTAGE_QUIET"] = "1"
@@ -1036,6 +1038,13 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 			# and the exemption is no longer needed.
 			portage._doebuild_manifest_exempt_depend -= 1
 		
+		# If hooks executed this time around, handle global settings changes
+		if (os.path.exists(mysettings["HOOKS_TMPDIR"]+"/settings/")):
+			hookDirectory = HookDirectory('post-ebuild', mysettings)
+			mysettings = hookDirectory.merge_to_env(mysettings, mysettings["HOOKS_TMPDIR"]+"/settings/")
+			print 'PYTHON: '+mysettings["PORTAGE_TMPDIR"]
+			shutil.rmtree(mysettings["HOOKS_TMPDIR"])
+		
 def _validate_deps(mysettings, myroot, mydo, mydbapi):
 
 	invalid_dep_exempt_phases = \
-- 
1.6.4.4

From 162e7698aa098927ff9a831bf904b95a611f9c0a Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 15:01:36 -0400
Subject: [PATCH 50/52] Updated documentation to reflect changes so far

---
 doc/config/hooks.docbook |   77 +++++++++++++++++++++++++++-------------------
 1 files changed, 45 insertions(+), 32 deletions(-)

diff --git a/doc/config/hooks.docbook b/doc/config/hooks.docbook
index ca62f5f..5017b67 100644
--- a/doc/config/hooks.docbook
+++ b/doc/config/hooks.docbook
@@ -1,26 +1,21 @@
 <chapter id='config-hooks'>
-	<title>Hooks Configuration</title>
-	<sect1 id='config-hooks-locations'>
-		<title>Hooks Locations</title>
+	<title id="config-hooks.title">Hooks Configuration</title>
+	
+	<sect1 id='config-hooks-execution'>
+		<title id="config-hooks-execution.title">Hooks Execution</title>
+		
 		<para>
 		If a hook directory exists, the bash scripts within each one
-		wil either be executed before or after that particular stage, in
+		wil either be executed before or after that particular phase, in
 		alphabetical order. Each one will receive the environment of an
 		ebuild, so they are capable of inherit, einfo, and other common
-		commands (if you find them useful). Avoid commands that may
-		trigger changes in the filesystem!
+		commands (if you find them useful). For non-ebuild hooks, avoid
+		commands that may trigger changes in the filesystem!
 		</para>
 		
 		<para>
-		All hooks are not allowed to directly alter portage's execution,
-		but they can accomplish certain extra tasks at various points,
-		which might indrectly alter portage's execution. Since hooks
-		execute in a bash environment, they are told the parent process
-		ID, which can be used to kill portage if absolutely needed. This
-		might be useful if a hook handled the rest of a certain job,
-		such as syncing, and portage's default behavior is undesired, or
-		if a hook caught potential problems with the rest of portage's
-		execution.
+		Ebuild hooks are executed within ebuild.sh, so they receive the
+		same sandbox limitations as ebuilds.
 		</para>
 		
 		<para>
@@ -37,32 +32,50 @@
 		</para>
 		
 		<para>
-		The following hook directories are supported. The standard hook
-		script usage applies, except wherever described differently.
+		If a hook needs a temporary directory, create one inside of
+		the directory indicated by the HOOKS_TMPDIR bash variable.
+		</para>
+		
+		<para>
+		Some hook types have slightly different usage. See <quote>
+		<link linkend='config-hooks-locations' endterm="config-hooks-locations.title"/></quote> for more
+		information.
+		</para>
+		
+	</sect1>
+	
+	<sect1 id='config-hooks-locations'>
+		<title id="config-hooks-locations.title">Hooks Locations</title>		
+		<para>
+		The following hook directories are supported. Each directory
+		corresponds to a specific type, such as <quote>ebuild</quote> or
+		<quote>run</quote>. The standard hook script usage applies given
+		in <link linkend='config-hooks-execution' endterm="config-hooks-execution.title"/>,
+		except wherever	described differently below.
 		</para>
 		
 		<itemizedlist>
-			<listitem><para><filename>/etc/portage/hooks/pre-ebuild.d/</filename> - executed before every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
-			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - executed after every ebuild execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
-			<listitem><para><filename>/etc/portage/hooks/pre-run.d/</filename> - executed before portage considers most things, including proper permissions and validity of arguments.</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/pre-ebuild.d/</filename> - executed before every ebuild phase execution, within ebuild.sh itself. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/post-ebuild.d/</filename> - executed after every ebuild phase execution. Never receives --opt, and --target is set to the full path of the ebuild.</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/pre-run.d/</filename> - executed before portage considers most things, including proper permissions and validity of parsed arguments.</para></listitem>
 			<listitem><para><filename>/etc/portage/hooks/post-run.d/</filename> - executed after portage is done. It should run regardless of any errors or signals sent, but this cannot be guaranteed for certain scenarios (such as when the KILL signal is received). No information is available concerning the reason portage is exiting. This is a limitation of python itself.</para></listitem>
 			<listitem><para><filename>/etc/portage/hooks/pre-sync.d/</filename> - executed before portage synchronizes the portage tree.</para></listitem>
-			<listitem><para><filename>/etc/portage/hooks/post-sync.d/</filename> - executed after portage has successfully synchronized the portage tree. Presently you must use a combination of pre-sync and post-run to catch sync failures if desired.</para></listitem>
+			<listitem><para><filename>/etc/portage/hooks/post-sync.d/</filename> - executed after portage has <emphasis>successfully</emphasis> synchronized the portage tree. If you want to catch a sync failure, use post-run.</para></listitem>
 		</itemizedlist>
 	</sect1>
+	
 	<sect1 id='config-hooks-skeleton-hook'>
-		<title>Skeleton Hook</title>
+		<title id="config-hooks-skeleton-hook.title">Skeleton Hook</title>
 		<para>
 		Most hooks will parse the options at the beginning and look for
 		specific things. This skeleton hook provides that functionality
-		to get you started. Replace the colons with actual code where
-		desired.
+		to get you started.
 		</para>
 		<para>
 		It's highly recommended that --verbose, --debug, and --quiet be
-		utilized for suppressing or adding to "regular" output. The
-		following skeleton hook already has example code in place to
-		handle these flags.
+		utilized for suppressing or adding to <quote>regular</quote>
+		output. The following skeleton hook already has example code in
+		place to handle these flags.
 		</para>
 		<programlisting>
 		#!/bin/bash
@@ -82,16 +95,16 @@
 					debug_redirect="/dev/null"
 				fi
 			elif [[ "$1" == "--action" ]]; then
-				:
+				: # do nothing
 			elif [[ "$1" == "--target" ]]; then
-				:
+				: # do nothing
 			else
-				ewarn "Unknown hook option: $1 $2" > "${verbose_redirect}" 2>&1
+				ewarn "Unknown hook option: $1 $2" &amp;> "${verbose_redirect}"
 			fi
 			shift 2
 		done
-		einfo "This is an example hook." > "${verbose_redirect}" 2>&1
-		einfo "This is debug output." > "${debug_redirect}" 2>&1
+		einfo "This is an example hook." &amp;> "${verbose_redirect}"
+		einfo "This is debug output." &amp;> "${debug_redirect}"
 		</programlisting>
 	</sect1>
 </chapter>
-- 
1.6.4.4

From b472b5d154cf72aa5efb40acdde32fb9b95277a9 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 15:05:11 -0400
Subject: [PATCH 51/52] Removed debug code

---
 pym/portage/package/ebuild/doebuild.py |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/pym/portage/package/ebuild/doebuild.py b/pym/portage/package/ebuild/doebuild.py
index 8e2edb5..596a1fe 100644
--- a/pym/portage/package/ebuild/doebuild.py
+++ b/pym/portage/package/ebuild/doebuild.py
@@ -1042,7 +1042,6 @@ def doebuild(myebuild, mydo, myroot, mysettings, debug=0, listonly=0,
 		if (os.path.exists(mysettings["HOOKS_TMPDIR"]+"/settings/")):
 			hookDirectory = HookDirectory('post-ebuild', mysettings)
 			mysettings = hookDirectory.merge_to_env(mysettings, mysettings["HOOKS_TMPDIR"]+"/settings/")
-			print 'PYTHON: '+mysettings["PORTAGE_TMPDIR"]
 			shutil.rmtree(mysettings["HOOKS_TMPDIR"])
 		
 def _validate_deps(mysettings, myroot, mydo, mydbapi):
-- 
1.6.4.4

From 79d2c2a1a4d6774fa36033b662c657957f416539 Mon Sep 17 00:00:00 2001
From: Jacob Godserv <jacobgodserv@gmail.com>
Date: Tue, 8 Jun 2010 17:42:03 -0400
Subject: [PATCH 52/52] Added mention of FEATURES="hooks" to documentation

---
 doc/config/hooks.docbook |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/doc/config/hooks.docbook b/doc/config/hooks.docbook
index 5017b67..5fc6000 100644
--- a/doc/config/hooks.docbook
+++ b/doc/config/hooks.docbook
@@ -4,6 +4,9 @@
 	<sect1 id='config-hooks-execution'>
 		<title id="config-hooks-execution.title">Hooks Execution</title>
 		
+		<para>Hooks are only executed if <quote>hooks</quote> is set in
+		FEATURES.</para>
+		
 		<para>
 		If a hook directory exists, the bash scripts within each one
 		wil either be executed before or after that particular phase, in
-- 
1.6.4.4

